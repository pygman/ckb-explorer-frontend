{"version":3,"file":"static/js/5443.99a7c561.chunk.js","mappings":"2TASMA,EAAY,SAChBC,EACAC,EACAC,GAE0B,IAD1BC,EAAW,wDAELC,EAAgB,CACpBC,KAAM,KACNC,MAAO,KACPC,IAAK,KACLC,OAAQ,KACRC,cAAc,GAEVC,EAAO,CACXL,KAAM,KACNC,MAAO,KACPC,IAAK,KACLC,OAAQ,KACRC,cAAc,GAGVE,EAAgB,SAACX,GACrB,IAAMY,EAAQZ,EAA2Ba,SAAQ,SAAAC,GAAI,OAAIC,WAAWD,EAAKE,kBAAkB,IAC3F,MAAO,CACLC,IAAKC,KAAKC,KAAKD,KAAKD,IAAG,MAARC,MAAI,OAAQN,IAAS,KACpCQ,IAAKF,KAAKG,MAAMH,KAAKE,IAAG,MAARF,MAAI,OAAQN,IAAS,KAEzC,EAEMU,EAAY,SAACC,GAAa,OAAKC,EAAAA,EAAAA,IAAaD,EAA6B,QAAtBE,EAAAA,EAAAA,MAA6B,IAAM,IAAI,EAE1FC,EAAe,SAAH,GAA4E,IAAtEC,EAAU,EAAVA,WAAYb,EAAI,EAAJA,KAAMc,EAAK,EAALA,MACxC,OAAID,IAAeE,EAAAA,GAAAA,EAAO,kCAClB,QAAN,QAAeC,EAAAA,EAAAA,IAAaF,IAAM,OAAGN,EAAUO,EAAAA,GAAAA,EAAO,mCAAkC,aAAIE,EAAAA,EAAAA,IAC1FjB,EAAK,IACN,UAECa,IAAeE,EAAAA,GAAAA,EAAO,mCAClB,QAAN,QAAeC,EAAAA,EAAAA,IAAaF,IAAM,OAAGN,EAAUO,EAAAA,GAAAA,EAAO,oCAAmC,aAAIE,EAAAA,EAAAA,IAC3FjB,EAAK,IACN,UAEI,EACT,EACA,MAAO,CACLc,MAAO3B,EAAW+B,OAClBC,QAAU9B,OAcN+B,EAbA,CACEC,QAAS,OACTC,UAAW,SAACC,GACV,IAAMC,EAAOD,EACTE,EAAM,gBAAWT,EAAAA,EAAAA,IAAa,YAAU,OAAGR,EAC7CO,EAAAA,GAAAA,EAAO,mBACR,aAAIW,EAAAA,EAAAA,IAAwB,IAAIC,KAAKH,EAAK,GAAGxB,KAAK,IAAK,KAAK,GAAM,UAInE,OAHAwB,EAAKI,SAAQ,SAAA5B,GACXyB,GAAUb,EAAaZ,EACzB,IACOyB,CACT,GAGNI,OAASxC,OAWL+B,EAVA,CACEpB,KAAM,CACJ,CACE8B,KAAMf,EAAAA,GAAAA,EAAO,mCAEf,CACEe,KAAMf,EAAAA,GAAAA,EAAO,sCAKvBnB,KAAMP,EAAcC,EAAgBM,EACpCmC,SAAU1C,EAAc,GAAK2C,EAAAA,GAC7BC,MAAO,CACL,CACEH,KAAM1C,GAAYC,EAAc,GAAK0B,EAAAA,GAAAA,EAAO,kBAC5CmB,aAAc,SACdC,QAAS,GACTC,KAAM,WACNC,aAAa,EACbC,UAAW,CACTC,MAAM,GAERC,UAAW,CACTlB,UAAW,SAACb,GAAa,OAAKgC,EAAAA,EAAAA,IAAgB,IAAId,KAAKlB,GAAO,KAIpEiC,MAAO,CACL,CACEC,SAAU,OACVb,KAAM1C,GAAYC,EAAc,GAAK0B,EAAAA,GAAAA,EAAO,kCAC5CqB,KAAM,QACNQ,OAAO,EACPC,cAAe,CACbC,MAAO,QAET3C,IAAK,kBAAMN,EAAcX,GAA4BiB,GAAG,EACxDG,IAAK,kBAAMT,EAAcX,GAA4BoB,GAAG,EACxDyC,SAAU,CACRC,UAAW,CACTlC,MAAO3B,EAAW+B,OAAO,KAG7BsB,UAAW,CACTlB,UAAW,SAACb,GAAa,OAAKQ,EAAAA,EAAAA,IAAmBR,EAAM,IAG3D,CACEkC,SAAU,QACVb,KAAM1C,GAAYC,EAAc,GAAK0B,EAAAA,GAAAA,EAAO,mCAC5CqB,KAAM,QACNQ,OAAO,EACPC,cAAe,CACbC,MAAO,SAET3C,IAAK,kBAAMN,EAAcX,GAA4BiB,GAAG,EACxDG,IAAK,kBAAMT,EAAcX,GAA4BoB,GAAG,EACxDyC,SAAU,CACRC,UAAW,CACTlC,MAAO3B,EAAW+B,OAAO,KAG7BsB,UAAW,CACTlB,UAAW,SAACb,GAAa,OAAKQ,EAAAA,EAAAA,IAAmBR,EAAM,KAI7DwC,OAAQ,CACN,CACEnB,KAAMf,EAAAA,GAAAA,EAAO,kCACbqB,KAAM,OACNc,WAAY,EACZC,OAAQ9D,EAAc,OAAS,SAC/B+D,WAAY,EACZC,OAAQ,CACNC,EAAG,YACHC,EAAG,UAGP,CACEzB,KAAMf,EAAAA,GAAAA,EAAO,mCACbqB,KAAM,OACNc,WAAY,EACZC,OAAQ9D,EAAc,OAAS,SAC/B+D,WAAY,EACZC,OAAQ,CACNC,EAAG,YACHC,EAAG,YAITC,QAAS,CACPC,OAAQvE,EAA2BwE,KAAI,SAAA1D,GAAI,MAAI,EAC7C2D,EAAAA,EAAAA,IAAiC,IAAjB3D,EAAK4D,YACpBC,OAAO7D,EAAKE,mBAAqB,KAAM4D,QAAQ,IAC/CD,OAAO7D,EAAK+D,oBAAsB,KAAMD,QAAQ,GAClD,IACDE,WAAY,CAAC,YAAa,QAAS,WAGzC,EAEMC,EAAQ,SAAC/E,GAA6D,OAC1EA,EACIA,EAA2BwE,KAAI,SAAA1D,GAAI,MAAI,CAACA,EAAK4D,UAAW5D,EAAKE,kBAAmBF,EAAK+D,mBAAmB,IACxG,EAAE,EAEKG,EAAwB,SAAH,GAA4D,IAAD,IAArD7E,YAAAA,OAAW,OAAQ,EACzD,GAAY8E,EAAAA,EAAAA,KAALC,GAAqB,YAApB,GACR,OACE,SAAC,KAAc,CACbC,MAAOD,EAAE,gCACTE,YAAaF,EAAE,4CACf/E,YAAaA,EACbkF,UAAWC,EAAAA,GACXC,gBAAiBxF,EACjBgF,MAAOA,EACPS,SAAUC,EAAAA,EAAAA,iBACVC,UAAU,QAGhB,EAEA,W,6TCjMaC,EAAmBC,EAAAA,GAAAA,IAAU,sEAK7BC,EAAmBD,EAAAA,GAAAA,IAAU,+7BAqD7BE,EAAeF,EAAAA,GAAAA,IAAU,8HAG1B,SAACG,GAAgC,OAAMA,EAAM5F,YAAc,QAAU,MAAM,IAK1E6F,EAAmBJ,EAAAA,GAAAA,IAAU,qbAK/B,SAACG,GAAgC,OAAMA,EAAM5F,YAAc,OAAS,OAAO,IAC1E,SAAC4F,GAAgC,OAAMA,EAAM5F,YAAc,OAAS,OAAO,IAG/D,SAAA4F,GAAK,OAAIA,EAAME,MAAMC,OAAO,IAIvC,SAACH,GAAgC,OAAMA,EAAM5F,YAAc,SAAW,MAAM,IAC3E,SAAC4F,GAAgC,OAAMA,EAAM5F,YAAc,OAAS,MAAM,IAO3E,SAAA4F,GAAK,OAAIA,EAAME,MAAMC,OAAO,IAI5BC,EAAiBP,EAAAA,GAAAA,IAAU,kI,8GCjElCQ,EAAc,SAAH,GAAiB,SAAXjG,aAA4D,SAACkG,EAAA,EAAY,KAAM,SAACC,EAAA,EAAO,CAACjD,MAAI,GAAG,EAEhHkD,EAAe,SAAH,OAAMlD,EAAI,EAAJA,KAAK,EAAD,EAAElD,YAAAA,OAAW,OAAQ,SAC/C,SAAC2F,EAAY,CAAC3F,YAAaA,EAAY,SACpCkD,GACC,SAAC+C,EAAW,CAACjG,YAAaA,KAE1B,UAAC6F,EAAgB,CAAC7F,YAAaA,EAAY,WACzC,gBAAKqG,IAAI,UAAUC,KAAKC,EAAAA,EAAAA,M,imDACxB,0BAAO7E,EAAAA,GAAAA,EAAO,2BAGL,EAGX8E,EAAiB,SAAH,GAgBb,IAfLC,EAAM,EAANA,OACAzG,EAAW,EAAXA,YACA0G,EAAU,EAAVA,WAAW,EAAD,EACVC,SAAAA,OAAQ,OAAQ,MAChBC,WAAAA,OAAU,OAAQ,EAClBC,EAAK,EAALA,MAAM,EAAD,EACLC,UAAAA,OAAS,MAAG,GAAE,EAURC,GAAWC,EAAAA,EAAAA,QAAuB,MAClCC,GAAmBD,EAAAA,EAAAA,QAAuB,MAC1CE,GAAaC,EAAAA,EAAAA,IAAYV,GACzBW,GAAiBD,EAAAA,EAAAA,IAAYT,GAmCnC,OAjCAW,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAgC,KACpC,GAAIP,EAASQ,QAAS,CACpB,IAAKN,EAAiBM,QAAS,CAC7B,IAAMC,EAAmBC,IAAAA,iBAAyBV,EAASQ,SACvDC,GACFA,EAAiBE,UAEnBT,EAAiBM,QAAUE,IAAAA,KAAaV,EAASQ,QACnD,CACAD,EAAgBL,EAAiBM,QACjC,KACOI,EAAAA,EAAAA,IAAYT,EAAYT,EAAQ,CAAC,eACpCa,EAAcM,UAAUnB,EAAQ,CAAEE,SAAAA,EAAUC,WAAAA,IAE1CF,GAAoC,oBAAfA,GAA6BA,IAAeU,GACnEE,EAAcO,GAAG,QAASnB,EAO9B,CALE,MAAOoB,GACPC,QAAQD,MAAM,QAASA,GACnBR,GACFA,EAAcI,SAElB,CACF,CACF,GAAG,CAAChB,EAAYE,EAAYD,EAAUF,EAAQW,EAAgBF,KAE9Dc,EAAAA,EAAAA,KAAgB,WACiB,IAAD,EAA1Bf,EAAiBM,UACK,QAAxB,EAAAN,EAAiBM,eAAO,OAAxB,EAA0BU,SAE9B,KAEO,gBAAKpB,OAAK,QAAIqB,OAAQlI,EAAc,QAAU,QAAW6G,GAASC,UAAWA,EAAWqB,IAAKpB,GACtG,EAcMqB,EAAY,SAAH,GAUR,IATLpD,EAAK,EAALA,MACAqD,EAAQ,EAARA,SACApD,EAAW,EAAXA,YAQMqD,EAvBU,SAAC3H,GACjB,GAAKA,GAAwB,IAAhBA,EAAK4H,OAAlB,CAGA,IAAID,EAAM,GAKV,OAJA3H,EAAK4B,SAAQ,SAAAiG,GACXF,GAAOE,EAAIC,KAAK,KAChBH,GAAO,IACT,IACOA,CANP,CAOF,CAacI,CAPR,EAAJ/H,MAQMgI,GAAY3D,EAAM4D,QAAQ,MAAQ,EAAI5D,EAAM6D,UAAU,EAAG7D,EAAM4D,QAAQ,OAAS5D,GACnF8D,QAAQ,KAAM,IACdC,cACAD,QAAQ,OAAQ,KACnB,OACE,UAACE,EAAA,EAAO,YACN,UAACtD,EAAgB,CAACoB,UAAU,YAAW,WACrC,iBAAKA,UAAU,8BAA6B,WAC1C,0BAAO9B,IACNC,IACC,SAAC,IAAO,CAACgE,UAAU,SAASjE,MAAOC,EAAY,UAC7C,gBAAKqB,IAAK4C,EAAU7C,IAAI,oBAI7BiC,IACC,cACExB,UAAU,iCACVqC,IAAI,sBACJC,KAAI,sCAAiCC,UAAUf,IAC/CgB,OAAO,SACPC,SAAQ,UAAKZ,EAAQ,QAAO,SAE3BjH,EAAAA,GAAAA,EAAO,iCAId,SAAC8D,EAAgB,CAACsB,UAAU,YAAW,SAAEuB,MAG/C,EAqBO,SAASmB,EAAc,GAYY,IAXxCxE,EAAK,EAALA,MACAC,EAAW,EAAXA,YACAwE,EAAI,EAAJA,KAAK,EAAD,EACJzJ,YAAAA,OAAW,OAAQ,EACnB0J,EAAU,EAAVA,WACAxE,EAAS,EAATA,UACAyE,EAAS,EAATA,UACAvE,EAAe,EAAfA,gBACAR,EAAK,EAALA,MACAS,EAAQ,EAARA,SAAS,EAAD,EACRE,UAAAA,OAAS,MAAG,UAAS,EAEfxF,GAAW6J,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,MAARD,IAEFE,GAAQC,EAAAA,EAAAA,IAAuB9E,EAAWG,EAAUE,GACpDrD,GAAW+H,EAAAA,EAAAA,UAAQ,wBAAgB,QAAhB,EAAMF,EAAMpJ,YAAI,QAAI,EAAE,GAAE,CAACoJ,EAAMpJ,QACxD0G,EAAAA,EAAAA,YAAU,WACJsC,GAAaI,EAAMpJ,MACrBgJ,EAAUI,EAAMpJ,KAEpB,GAAG,CAACgJ,EAAWI,EAAMpJ,OAErB,IAAM8F,GAASwD,EAAAA,EAAAA,UACb,kBAAM7E,EAAgBlD,EAAU2H,EAAI/J,WAAYC,EAAUC,EAAY,GACtE,CAAC6J,EAAI/J,WAAYoC,EAAUkD,EAAiBrF,EAAUC,IAGlDkK,EAAUH,EAAMI,WACpB,SAAC/D,EAAY,CAAClD,MAAI,EAAClD,YAAaA,KAEhC,SAACwG,GAAc,QAACC,OAAQA,EAAQzG,YAAaA,GAAiB0J,IAGhE,OAAO1J,EACLkK,GAEA,UAAC9B,EAAS,CAACpD,MAAOA,EAAOC,YAAaA,EAAatE,KAAMiE,EAAM1C,GAAU,UACtEgI,EACQ,MAART,IAAgB,SAACzD,EAAc,UAAEyD,MAGxC,CAEA,IAAM9H,EAAe,SAACF,GAAa,8JACgHA,EAAK,cAElJJ,EAAe,SAACD,EAAegJ,GAAa,mCAC1BA,EAAK,qCAA6BhJ,EAAK,Y,iIC/NlDuB,EAAmB,CAC9B,CACEO,MAAM,EACNmH,UAAU,EACVC,MAAO,EACPC,IAAK,IACLC,WAAY,CAAC,IAEf,CACEzH,KAAM,SACNsH,UAAU,EACVC,MAAO,EACPC,IAAK,IACLC,WAAY,CAAC,KAIJC,EAAa,SAACrJ,EAAoCsJ,EAAkBC,GAC/E,IAAMC,EAA4B,kBAAVxJ,GAAuC,kBAAVA,EAAqB,IAAIyJ,IAAJ,CAAczJ,GAASA,EACjG,GAAIwJ,EAASE,SAAWF,EAASG,SAAU,MAAO,IAClD,IAAMC,EAAKJ,EAASK,UAAU,KACxBC,EAAKF,EAAGC,UAAU,KAClBE,EAAKD,EAAGD,UAAU,KAClBG,EAAKD,EAAGF,UAAU,KAClBI,EAAKD,EAAGH,UAAU,KAClBK,EAAKD,EAAGJ,UAAU,KAClBM,EAAKD,EAAGL,UAAU,KAClBO,EAAKD,EAAGN,UAAU,KAExB,OAAIO,EAAGC,uBAAuB,GACtB,GAAN,YAAsB1J,IAAZ2I,EAAwBc,EAAG/G,QAAQiG,GAAWc,EAAG/G,UAAS,KAElE8G,EAAGE,uBAAuB,GACtB,GAAN,YAAsB1J,IAAZ2I,EAAwBa,EAAG9G,QAAQiG,GAAWa,EAAG9G,UAAS,KAElE6G,EAAGG,uBAAuB,GACtB,GAAN,YAAsB1J,IAAZ2I,EAAwBY,EAAG7G,QAAQiG,GAAWY,EAAG7G,UAAS,KAElE4G,EAAGI,uBAAuB,GACtB,GAAN,YAAsB1J,IAAZ2I,EAAwBW,EAAG5G,QAAQiG,GAAWW,EAAG5G,UAAS,KAElE2G,EAAGK,uBAAuB,GACtB,GAAN,YAAsB1J,IAAZ2I,EAAwBU,EAAG3G,QAAQiG,GAAWU,EAAG3G,UAAS,KAElE0G,EAAGM,uBAAuB,GACtB,GAAN,YAAsB1J,IAAZ2I,EAAwBS,EAAG1G,QAAQiG,GAAWS,EAAG1G,UAAS,KAElEyG,EAAGO,uBAAuB,GACtB,GAAN,YAAsB1J,IAAZ2I,EAAwBQ,EAAGzG,QAAQiG,GAAWQ,EAAGzG,UAAS,KAElEuG,EAAGS,uBAAuB,GACtB,GAAN,YAAsB1J,IAAZ2I,EAAwBM,EAAGvG,QAAQiG,GAAWM,EAAGvG,UAAS,KAEhE,GAAN,OAAUiG,IAAYC,EAAWC,EAASnG,QAAQiG,GAAWE,EAASnG,UACxE,EAEaiH,EAAqB,SAACtK,EAAoCuK,GACrE,IAAMf,EAA4B,kBAAVxJ,GAAuC,kBAAVA,EAAqB,IAAIyJ,IAAJ,CAAczJ,GAASA,EACjG,MAAM,IAAN,OAAWwJ,EAASa,uBAAuB,KAAQhB,EAAWG,EAASK,UAAU,IAAK,GAAK,IAAG,aAAKR,EACjGrJ,EACA,IACD,OAAGuK,GAAU,GAAE,IAClB,C,yJC9Da/J,EAAqB,SAACR,GACjC,IAAKA,EAAO,MAAO,IACnB,IAAMwK,EAA0B,kBAAVxK,GAAuC,kBAAVA,EAAqB,IAAIyJ,IAAJ,CAAczJ,GAASA,EACzFwJ,EAAWgB,EAAOC,MACxB,GAAIjB,EAASE,QACX,MAAO,IAET,GAAIF,EAASkB,WAAW,IAAMlB,EAASiB,MAAME,cAAc,GACzD,MAAM,GAAN,OAAU3K,GAKZ,IAHA,IAAI4K,EAAOpB,EAASqB,SAAS,IACvBC,EAAaF,EAAKpD,QAAQ,KAC5BuD,GAAyB,IAAhBD,EAAoBF,EAAKzD,OAAS2D,EACxCC,EAAS,GACdH,EAAOA,EACJI,MAAM,EAAGD,EAAS,GAClBE,OAAO,KACPA,OAAOL,EAAKI,MAAMD,EAAS,IAC9BA,GAAU,EAEZ,OAAOP,EAAOU,aAAY,WAAON,GAASA,CAC5C,EAEMO,EAAY,IAAI1B,IAAJ,CAAc,GACnB2B,EAAmB,SAACpL,GAC/B,IAAKA,EAAO,MAAO,IACnB,IAAMwJ,EAA4B,kBAAVxJ,GAAuC,kBAAVA,EAAqB,IAAIyJ,IAAJ,CAAczJ,GAASA,EAC3F4J,EAAKJ,EAASK,UAAU,KACxBC,EAAKF,EAAGC,UAAU,KAClBE,EAAKD,EAAGD,UAAU,KAClBG,EAAKD,EAAGF,UAAU,KAClBI,EAAKD,EAAGH,UAAU,KAClBK,EAAKD,EAAGJ,UAAU,KAClBM,EAAKD,EAAGL,UAAU,KAClBO,EAAKD,EAAGN,UAAU,KAExB,OAAIO,EAAGC,uBAAuBc,GACtB,GAAN,OAAU3K,EAAmB4J,EAAG/G,QAAQ,IAAG,OAEzC8G,EAAGE,uBAAuBc,GACtB,GAAN,OAAU3K,EAAmB2J,EAAG9G,QAAQ,IAAG,OAEzC6G,EAAGG,uBAAuBc,GACtB,GAAN,OAAU3K,EAAmB0J,EAAG7G,QAAQ,IAAG,OAEzC4G,EAAGI,uBAAuBc,GACtB,GAAN,OAAU3K,EAAmByJ,EAAG5G,QAAQ,IAAG,OAEzC2G,EAAGK,uBAAuBc,GACtB,GAAN,OAAU3K,EAAmBwJ,EAAG3G,QAAQ,IAAG,OAEzC0G,EAAGM,uBAAuBc,GACtB,GAAN,OAAU3K,EAAmBuJ,EAAG1G,QAAQ,IAAG,OAEzCyG,EAAGO,uBAAuBc,GACtB,GAAN,OAAU3K,EAAmBsJ,EAAGzG,QAAQ,IAAG,OAEzCuG,EAAGS,uBAAuBc,GACtB,GAAN,OAAU3K,EAAmBoJ,EAAGvG,QAAQ,IAAG,OAEvC,GAAN,OAAU7C,EAAmBgJ,EAASnG,QAAQ,IAAG,KACnD,EAEagI,EAAiB,SAACrL,GAC7B,MAAM,GAAN,OAAUoL,EAAiBpL,GAAM,KACnC,EAEasL,EAAiB,SAACC,EAAgBjC,GAC7C,IACE,IAAMkC,EAAaC,SAASnC,EAAS,IAE/BtI,EADe,IAAIyI,IAAJ,CAAc8B,GACP1B,UAAU,IAAIJ,IAAJ,CAAc,IAAIiC,IAAIF,IAC5D,OAAIA,EAAa,GACT,GAAN,OAAUxK,EAAOqC,QAAQ,IAAG,OAE1BrC,EAAO6J,WAAW1D,QAAU,IAAMnG,EAAO2K,GAAG,IAAIlC,IAAJ,CAAc,OACrDjJ,EAAmBQ,EAAOqC,QAAQmI,IAEpChL,EAAmBQ,EAAO4K,WAInC,CAHE,MAAOlF,GAEP,OADAC,QAAQD,MAAMA,GACP,GACT,CACF,C","sources":["pages/StatisticsChart/block/AverageBlockTime.tsx","pages/StatisticsChart/common/styled.tsx","pages/StatisticsChart/common/index.tsx","utils/chart.ts","utils/number.ts"],"sourcesContent":["import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { parseDateNoTime, parseSimpleDate, parseSimpleDateNoSecond } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { localeNumberString } from '../../../utils/number'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { fetchStatisticAverageBlockTimes } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\n\nconst getOption = (\n  statisticAverageBlockTimes: State.StatisticAverageBlockTime[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '3%',\n    right: '3%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '2%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n\n  const maxAndMinAxis = (statisticAverageBlockTimes: State.StatisticAverageBlockTime[]) => {\n    const array = statisticAverageBlockTimes.flatMap(data => parseFloat(data.avgBlockTimeDaily))\n    return {\n      max: Math.ceil(Math.max(...array) / 1000),\n      min: Math.floor(Math.min(...array) / 1000),\n    }\n  }\n\n  const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 180 : 100)\n\n  const parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: string }): string => {\n    if (seriesName === i18n.t('statistic.daily_moving_average')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.daily_moving_average'))} ${localeNumberString(\n        data[1],\n      )}</div>`\n    }\n    if (seriesName === i18n.t('statistic.weekly_moving_average')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.weekly_moving_average'))} ${localeNumberString(\n        data[2],\n      )}</div>`\n    }\n    return ''\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: string }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(\n              i18n.t('statistic.date'),\n            )} ${parseSimpleDateNoSecond(new Date(list[0].data[0]), '/', false)}</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: !isThumbnail\n      ? {\n          data: [\n            {\n              name: i18n.t('statistic.daily_moving_average'),\n            },\n            {\n              name: i18n.t('statistic.weekly_moving_average'),\n            },\n          ],\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category', // TODO: use type: time\n        boundaryGap: false,\n        splitLine: {\n          show: false,\n        },\n        axisLabel: {\n          formatter: (value: string) => parseDateNoTime(new Date(value)),\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.daily_moving_average'),\n        type: 'value',\n        scale: true,\n        nameTextStyle: {\n          align: 'left',\n        },\n        max: () => maxAndMinAxis(statisticAverageBlockTimes).max,\n        min: () => maxAndMinAxis(statisticAverageBlockTimes).min,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => localeNumberString(value),\n        },\n      },\n      {\n        position: 'right',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.weekly_moving_average'),\n        type: 'value',\n        scale: true,\n        nameTextStyle: {\n          align: 'right',\n        },\n        max: () => maxAndMinAxis(statisticAverageBlockTimes).max,\n        min: () => maxAndMinAxis(statisticAverageBlockTimes).min,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[1],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => localeNumberString(value),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.daily_moving_average'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'daily',\n        },\n      },\n      {\n        name: i18n.t('statistic.weekly_moving_average'),\n        type: 'line',\n        yAxisIndex: 1,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'weekly',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticAverageBlockTimes.map(data => [\n        parseSimpleDate(data.timestamp * 1000),\n        (Number(data.avgBlockTimeDaily) / 1000).toFixed(2),\n        (Number(data.avgBlockTimeWeekly) / 1000).toFixed(2),\n      ]),\n      dimensions: ['timestamp', 'daily', 'weekly'],\n    },\n  }\n}\n\nconst toCSV = (statisticAverageBlockTimes: State.StatisticAverageBlockTime[]) =>\n  statisticAverageBlockTimes\n    ? statisticAverageBlockTimes.map(data => [data.timestamp, data.avgBlockTimeDaily, data.avgBlockTimeWeekly])\n    : []\n\nexport const AverageBlockTimeChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.average_block_time')}\n      description={t('statistic.average_block_time_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticAverageBlockTimes}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.AverageBlockTime}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default AverageBlockTimeChart\n","import styled from 'styled-components'\n\nexport const ChartDetailPanel = styled.div`\n  margin-bottom: 30px;\n  background: white;\n`\n\nexport const ChartDetailTitle = styled.div`\n  background: white;\n  margin-top: 30px;\n  padding: 10px 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media (max-width: 750px) {\n    margin-top: 20px;\n  }\n\n  .chart__detail__title__panel {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex: 1;\n\n    > span {\n      color: #000000;\n      text-align: center;\n      font-size: 24px;\n      margin-left: 100px;\n\n      @media (max-width: 750px) {\n        font-size: 16px;\n        margin-left: 0px;\n      }\n    }\n\n    > img {\n      width: 18px;\n      height: 18px;\n      margin-left: 10px;\n    }\n  }\n\n  .chart__detail__title__download {\n    width: 100px;\n    padding: 5px 0;\n    border-radius: 2px;\n    border: solid 1px #666666;\n    font-size: 12px;\n    text-align: center;\n    color: #666666;\n    margin-right: 3.6%;\n\n    @media (max-width: 750px) {\n      display: none;\n    }\n  }\n`\n\nexport const LoadingPanel = styled.div`\n  display: flex;\n  width: 100%;\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '200px' : '70vh')};\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ChartNoDataPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '92px' : '184px')};\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '56px' : '112px')};\n  border-radius: 6px;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.12);\n  border: solid 0.5px ${props => props.theme.primary};\n  background-color: #ffffff;\n\n  > img {\n    width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '18.5px' : '37px')};\n    height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '14px' : '28px')};\n  }\n\n  > span {\n    font-size: 12px;\n    font-weight: 500;\n    margin-top: 5px;\n    color: ${props => props.theme.primary};\n  }\n`\n\nexport const ChartNotePanel = styled.div`\n  font-size: 12px;\n  with: 100%;\n  color: rgba(0, 0, 0, 0.6);\n  padding: 6px 3%;\n  text-align: left;\n`\n","import { ComponentProps, CSSProperties, ReactElement, ReactNode, useEffect, useMemo, useRef } from 'react'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/chart/bar'\nimport 'echarts/lib/chart/pie'\nimport 'echarts/lib/chart/map'\nimport 'echarts/lib/chart/scatter'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/markLine'\nimport 'echarts/lib/component/dataZoom'\nimport 'echarts/lib/component/brush'\nimport echarts from 'echarts/lib/echarts'\nimport { Tooltip } from 'antd'\nimport { EChartOption, ECharts } from 'echarts'\nimport { LoadingPanel, ChartNoDataPanel, ChartDetailTitle, ChartDetailPanel, ChartNotePanel } from './styled'\nimport Loading from '../../../components/Loading'\nimport ChartNoDataImage from '../../../assets/chart_no_data.png'\nimport ChartNoDataAggronImage from '../../../assets/chart_no_data_aggron.png'\nimport HelpIcon from '../../../assets/qa_help.png'\nimport { isMainnet } from '../../../utils/chain'\nimport SmallLoading from '../../../components/Loading/SmallLoading'\nimport i18n from '../../../utils/i18n'\nimport Content from '../../../components/Content'\nimport { useChartQueryWithCache, useIsMobile, usePrevious, useWindowResize } from '../../../utils/hook'\nimport { useAppState } from '../../../contexts/providers'\nimport { isDeepEqual } from '../../../utils/util'\n\nconst LoadingComp = ({ isThumbnail }: { isThumbnail?: boolean }) => (isThumbnail ? <SmallLoading /> : <Loading show />)\n\nconst ChartLoading = ({ show, isThumbnail = false }: { show: boolean; isThumbnail?: boolean }) => (\n  <LoadingPanel isThumbnail={isThumbnail}>\n    {show ? (\n      <LoadingComp isThumbnail={isThumbnail} />\n    ) : (\n      <ChartNoDataPanel isThumbnail={isThumbnail}>\n        <img alt=\"no data\" src={isMainnet() ? ChartNoDataImage : ChartNoDataAggronImage} />\n        <span>{i18n.t('statistic.no_data')}</span>\n      </ChartNoDataPanel>\n    )}\n  </LoadingPanel>\n)\n\nconst ReactChartCore = ({\n  option,\n  isThumbnail,\n  clickEvent,\n  notMerge = false,\n  lazyUpdate = false,\n  style,\n  className = '',\n}: {\n  option: EChartOption\n  isThumbnail?: boolean\n  clickEvent?: any\n  notMerge?: boolean\n  lazyUpdate?: boolean\n  style?: CSSProperties\n  className?: string\n}) => {\n  const chartRef = useRef<HTMLDivElement>(null)\n  const chartInstanceRef = useRef<ECharts | null>(null)\n  const prevOption = usePrevious(option)\n  const prevClickEvent = usePrevious(clickEvent)\n\n  useEffect(() => {\n    let chartInstance: ECharts | null = null\n    if (chartRef.current) {\n      if (!chartInstanceRef.current) {\n        const renderedInstance = echarts.getInstanceByDom(chartRef.current)\n        if (renderedInstance) {\n          renderedInstance.dispose()\n        }\n        chartInstanceRef.current = echarts.init(chartRef.current)\n      }\n      chartInstance = chartInstanceRef.current\n      try {\n        if (!isDeepEqual(prevOption, option, ['formatter'])) {\n          chartInstance.setOption(option, { notMerge, lazyUpdate })\n        }\n        if (clickEvent && typeof clickEvent === 'function' && clickEvent !== prevClickEvent) {\n          chartInstance.on('click', clickEvent)\n        }\n      } catch (error) {\n        console.error('error', error)\n        if (chartInstance) {\n          chartInstance.dispose()\n        }\n      }\n    }\n  }, [clickEvent, lazyUpdate, notMerge, option, prevClickEvent, prevOption])\n\n  useWindowResize(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current?.resize()\n    }\n  })\n\n  return <div style={{ height: isThumbnail ? '200px' : '70vh', ...style }} className={className} ref={chartRef} />\n}\n\nconst dataToCsv = (data: any[] | undefined) => {\n  if (!data || data.length === 0) {\n    return undefined\n  }\n  let csv = ''\n  data.forEach(row => {\n    csv += row.join(',')\n    csv += '\\n'\n  })\n  return csv\n}\n\nconst ChartPage = ({\n  title,\n  children,\n  description,\n  data,\n}: {\n  title: string\n  children: ReactNode\n  description?: string\n  data?: (string | number)[][]\n}) => {\n  const csv = dataToCsv(data)\n  const fileName = (title.indexOf(' (') > 0 ? title.substring(0, title.indexOf(' (')) : title)\n    .replace(/&/g, '')\n    .toLowerCase()\n    .replace(/\\s+/g, '-')\n  return (\n    <Content>\n      <ChartDetailTitle className=\"container\">\n        <div className=\"chart__detail__title__panel\">\n          <span>{title}</span>\n          {description && (\n            <Tooltip placement=\"bottom\" title={description}>\n              <img src={HelpIcon} alt=\"chart help\" />\n            </Tooltip>\n          )}\n        </div>\n        {csv && (\n          <a\n            className=\"chart__detail__title__download\"\n            rel=\"noopener noreferrer\"\n            href={`data:text/csv;charset=utf-8,${encodeURI(csv)}`}\n            target=\"_blank\"\n            download={`${fileName}.csv`}\n          >\n            {i18n.t('statistic.download_data')}\n          </a>\n        )}\n      </ChartDetailTitle>\n      <ChartDetailPanel className=\"container\">{children}</ChartDetailPanel>\n    </Content>\n  )\n}\n\nexport interface SmartChartPageProps<T> {\n  title: string\n  description?: string\n  note?: string\n  isThumbnail?: boolean\n  chartProps?: Partial<ComponentProps<typeof ReactChartCore>>\n  fetchData: () => Promise<T[] | Response.Response<Response.Wrapper<T>[]>>\n  onFetched?: (dataList: T[]) => void\n  getEChartOption: (\n    dataList: T[],\n    chartColor: State.App['chartColor'],\n    isMobile: boolean,\n    isThumbnail: boolean,\n  ) => echarts.EChartOption\n  toCSV: (dataList: T[]) => (string | number)[][]\n  cacheKey?: string\n  cacheMode?: 'forever' | 'date' | 'epoch'\n}\n\nexport function SmartChartPage<T>({\n  title,\n  description,\n  note,\n  isThumbnail = false,\n  chartProps,\n  fetchData,\n  onFetched,\n  getEChartOption,\n  toCSV,\n  cacheKey,\n  cacheMode = 'forever',\n}: SmartChartPageProps<T>): ReactElement {\n  const isMobile = useIsMobile()\n  const { app } = useAppState()\n\n  const query = useChartQueryWithCache(fetchData, cacheKey, cacheMode)\n  const dataList = useMemo(() => query.data ?? [], [query.data])\n  useEffect(() => {\n    if (onFetched && query.data) {\n      onFetched(query.data)\n    }\n  }, [onFetched, query.data])\n\n  const option = useMemo(\n    () => getEChartOption(dataList, app.chartColor, isMobile, isThumbnail),\n    [app.chartColor, dataList, getEChartOption, isMobile, isThumbnail],\n  )\n\n  const content = query.isLoading ? (\n    <ChartLoading show isThumbnail={isThumbnail} />\n  ) : (\n    <ReactChartCore option={option} isThumbnail={isThumbnail} {...chartProps} />\n  )\n\n  return isThumbnail ? (\n    content\n  ) : (\n    <ChartPage title={title} description={description} data={toCSV(dataList)}>\n      {content}\n      {note != null && <ChartNotePanel>{note}</ChartNotePanel>}\n    </ChartPage>\n  )\n}\n\nconst tooltipColor = (color: string) =>\n  `<span style=\"display:inline-block;margin-right:8px;margin-left:5px;margin-bottom:2px;border-radius:10px;width:6px;height:6px;background-color:${color}\"></span>`\n\nconst tooltipWidth = (value: string, width: number) =>\n  `<span style=\"width:${width}px;display:inline-block;\">${value}:</span>`\n\nexport type SeriesItem = { seriesName: string; name: string; color: string; dataIndex: number }\n\nexport { ChartLoading, ReactChartCore, ChartPage, tooltipColor, tooltipWidth }\n","import BigNumber from 'bignumber.js'\n\nexport const DATA_ZOOM_CONFIG = [\n  {\n    show: true,\n    realtime: true,\n    start: 0,\n    end: 100,\n    xAxisIndex: [0],\n  },\n  {\n    type: 'inside',\n    realtime: true,\n    start: 0,\n    end: 100,\n    xAxisIndex: [0],\n  },\n]\n\nexport const handleAxis = (value: BigNumber | string | number, decimal?: number, hideZero?: boolean) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  if (bigValue.isNaN() || bigValue.isZero()) return '0'\n  const kv = bigValue.dividedBy(1000)\n  const mv = kv.dividedBy(1000)\n  const gv = mv.dividedBy(1000)\n  const tv = gv.dividedBy(1000)\n  const pv = tv.dividedBy(1000)\n  const ev = pv.dividedBy(1000)\n  const zv = ev.dividedBy(1000)\n  const yv = zv.dividedBy(1000)\n\n  if (yv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? yv.toFixed(decimal) : yv.toFixed()}Y`\n  }\n  if (zv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? zv.toFixed(decimal) : zv.toFixed()}Z`\n  }\n  if (ev.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? ev.toFixed(decimal) : ev.toFixed()}E`\n  }\n  if (pv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? pv.toFixed(decimal) : pv.toFixed()}P`\n  }\n  if (tv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? tv.toFixed(decimal) : tv.toFixed()}T`\n  }\n  if (gv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? gv.toFixed(decimal) : gv.toFixed()}G`\n  }\n  if (mv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? mv.toFixed(decimal) : mv.toFixed()}M`\n  }\n  if (kv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? kv.toFixed(decimal) : kv.toFixed()}K`\n  }\n  return `${decimal && !hideZero ? bigValue.toFixed(decimal) : bigValue.toFixed()}`\n}\n\nexport const handleLogGroupAxis = (value: BigNumber | string | number, suffix?: string) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  return `[${bigValue.isGreaterThanOrEqualTo(1000) ? handleAxis(bigValue.dividedBy(10), 0) : '0'}, ${handleAxis(\n    value,\n    0,\n  )}${suffix || ''}]`\n}\n\nexport const handleStepGroupAxis = (value: BigNumber | string | number, step?: number, suffix?: string) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  return `[${bigValue.minus(step || 100)}, ${value}${suffix || ''}]`\n}\n\nexport const parseInterval = (max: number, min: number) => {\n  const count = 20\n  const interval = (max - min) / count\n  const { length } = Math.ceil(interval).toString()\n  const factor = 10 ** (length > 2 ? length - 2 : 0)\n  return (Math.ceil(interval / factor) + 1) * factor\n}\n","import BigNumber from 'bignumber.js'\n\nexport const localeNumberString = (value: BigNumber | string | number): string => {\n  if (!value) return '0'\n  const origin = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  const bigValue = origin.abs()\n  if (bigValue.isNaN()) {\n    return '0'\n  }\n  if (bigValue.isLessThan(1) && bigValue.abs().isGreaterThan(0)) {\n    return `${value}`\n  }\n  let text = bigValue.toString(10)\n  const pointIndex = text.indexOf('.')\n  let offset = pointIndex === -1 ? text.length : pointIndex\n  while (offset > 3) {\n    text = text\n      .slice(0, offset - 3)\n      .concat(',')\n      .concat(text.slice(offset - 3))\n    offset -= 3\n  }\n  return origin.isNegative() ? `-${text}` : text\n}\n\nconst MIN_VALUE = new BigNumber(1)\nexport const handleDifficulty = (value: BigNumber | string | number) => {\n  if (!value) return '0'\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  const kv = bigValue.dividedBy(1000)\n  const mv = kv.dividedBy(1000)\n  const gv = mv.dividedBy(1000)\n  const tv = gv.dividedBy(1000)\n  const pv = tv.dividedBy(1000)\n  const ev = pv.dividedBy(1000)\n  const zv = ev.dividedBy(1000)\n  const yv = zv.dividedBy(1000)\n\n  if (yv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(yv.toFixed(2))} YH`\n  }\n  if (zv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(zv.toFixed(2))} ZH`\n  }\n  if (ev.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(ev.toFixed(2))} EH`\n  }\n  if (pv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(pv.toFixed(2))} PH`\n  }\n  if (tv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(tv.toFixed(2))} TH`\n  }\n  if (gv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(gv.toFixed(2))} GH`\n  }\n  if (mv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(mv.toFixed(2))} MH`\n  }\n  if (kv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(kv.toFixed(2))} KH`\n  }\n  return `${localeNumberString(bigValue.toFixed(2))} H`\n}\n\nexport const handleHashRate = (value: BigNumber | string | number) => {\n  return `${handleDifficulty(value)}/s`\n}\n\nexport const parseUDTAmount = (amount: string, decimal: string) => {\n  try {\n    const decimalInt = parseInt(decimal, 10)\n    const amountBigInt = new BigNumber(amount)\n    const result = amountBigInt.dividedBy(new BigNumber(10).pow(decimalInt))\n    if (decimalInt > 20) {\n      return `${result.toFixed(20)}...`\n    }\n    if (result.toString().length >= 16 || result.lt(new BigNumber(0.000001))) {\n      return localeNumberString(result.toFixed(decimalInt))\n    }\n    return localeNumberString(result.toNumber())\n  } catch (error) {\n    console.error(error)\n    return '0'\n  }\n}\n"],"names":["getOption","statisticAverageBlockTimes","chartColor","isMobile","isThumbnail","gridThumbnail","left","right","top","bottom","containLabel","grid","maxAndMinAxis","array","flatMap","data","parseFloat","avgBlockTimeDaily","max","Math","ceil","min","floor","widthSpan","value","tooltipWidth","currentLanguage","parseTooltip","seriesName","color","i18n","tooltipColor","localeNumberString","colors","tooltip","undefined","trigger","formatter","dataList","list","result","parseSimpleDateNoSecond","Date","forEach","legend","name","dataZoom","DATA_ZOOM_CONFIG","xAxis","nameLocation","nameGap","type","boundaryGap","splitLine","show","axisLabel","parseDateNoTime","yAxis","position","scale","nameTextStyle","align","axisLine","lineStyle","series","yAxisIndex","symbol","symbolSize","encode","x","y","dataset","source","map","parseSimpleDate","timestamp","Number","toFixed","avgBlockTimeWeekly","dimensions","toCSV","AverageBlockTimeChart","useTranslation","t","title","description","fetchData","fetchStatisticAverageBlockTimes","getEChartOption","cacheKey","ChartCachedKeys","cacheMode","ChartDetailPanel","styled","ChartDetailTitle","LoadingPanel","props","ChartNoDataPanel","theme","primary","ChartNotePanel","LoadingComp","SmallLoading","Loading","ChartLoading","alt","src","isMainnet","ReactChartCore","option","clickEvent","notMerge","lazyUpdate","style","className","chartRef","useRef","chartInstanceRef","prevOption","usePrevious","prevClickEvent","useEffect","chartInstance","current","renderedInstance","echarts","dispose","isDeepEqual","setOption","on","error","console","useWindowResize","resize","height","ref","ChartPage","children","csv","length","row","join","dataToCsv","fileName","indexOf","substring","replace","toLowerCase","Content","placement","HelpIcon","rel","href","encodeURI","target","download","SmartChartPage","note","chartProps","onFetched","useIsMobile","app","useAppState","query","useChartQueryWithCache","useMemo","content","isLoading","width","realtime","start","end","xAxisIndex","handleAxis","decimal","hideZero","bigValue","BigNumber","isNaN","isZero","kv","dividedBy","mv","gv","tv","pv","ev","zv","yv","isGreaterThanOrEqualTo","handleLogGroupAxis","suffix","origin","abs","isLessThan","isGreaterThan","text","toString","pointIndex","offset","slice","concat","isNegative","MIN_VALUE","handleDifficulty","handleHashRate","parseUDTAmount","amount","decimalInt","parseInt","pow","lt","toNumber"],"sourceRoot":""}