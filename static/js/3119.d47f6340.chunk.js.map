{"version":3,"file":"static/js/3119.d47f6340.chunk.js","mappings":"kTASMA,EAAY,SAACC,GAAa,OAAKC,EAAAA,EAAAA,IAAaD,EAA6B,QAAtBE,EAAAA,EAAAA,MAA6B,GAAK,GAAG,EAExFC,EAAe,SAAH,GAA8F,IAAxFC,EAAU,EAAVA,WAAYC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MACxC,OAAIF,IAAeG,EAAAA,GAAAA,EAAO,uBAClB,QAAN,QAAeC,EAAAA,EAAAA,IAAaF,IAAM,OAAGP,EAAUQ,EAAAA,GAAAA,EAAO,wBAAuB,aAAIE,EAAAA,EAAAA,IAAWJ,EAAK,GAAI,GAAE,UAErGD,IAAeG,EAAAA,GAAAA,EAAO,uBAClB,QAAN,QAAeC,EAAAA,EAAAA,IAAaF,IAAM,OAAGP,EAAUQ,EAAAA,GAAAA,EAAO,wBAAuB,aAAIE,EAAAA,EAAAA,IAAWJ,EAAK,GAAI,GAAE,UAElG,EACT,EAEMK,EAAY,SAChBC,EACAC,EACAC,GAE0B,IAD1BC,EAAW,wDAELC,EAAgB,CACpBC,KAAM,KACNC,MAAO,KACPC,IAAK,KACLC,OAAQ,KACRC,cAAc,GAEVC,EAAO,CACXL,KAAM,KACNC,MAAO,KACPC,IAAK,KACLC,OAAQ,KACRC,cAAc,GAEhB,MAAO,CACLd,MAAOM,EAAWU,OAClBC,QAAUT,OAcNU,EAbA,CACEC,QAAS,OACTC,UAAW,SAACC,GACV,IAAMC,EAAOD,EACTE,EAAM,gBAAWrB,EAAAA,EAAAA,IAAa,YAAU,OAAGT,EAAUQ,EAAAA,GAAAA,EAAO,mBAAkB,YAChFqB,EAAK,GAAGvB,KAAK,GAAE,UAKjB,OAHAuB,EAAKE,SAAQ,SAAAzB,GACXwB,GAAU1B,EAAaE,EACzB,IACOwB,CACT,GAGNE,OAASjB,OAWLU,EAVA,CACEnB,KAAM,CACJ,CACE2B,KAAMzB,EAAAA,GAAAA,EAAO,wBAEf,CACEyB,KAAMzB,EAAAA,GAAAA,EAAO,0BAKvBc,KAAMP,EAAcC,EAAgBM,EACpCY,SAAUnB,EAAc,GAAKoB,EAAAA,GAC7BC,MAAO,CACL,CACEH,KAAMnB,GAAYC,EAAc,GAAKP,EAAAA,GAAAA,EAAO,kBAC5C6B,aAAc,SACdC,QAAS,GACTC,KAAM,WACNC,aAAa,IAGjBC,MAAO,CACL,CACEC,SAAU,OACVT,KAAMnB,GAAYC,EAAc,GAAKP,EAAAA,GAAAA,EAAO,uBAC5C+B,KAAM,QACNI,OAAO,EACPC,SAAU,CACRC,UAAW,CACTtC,MAAOM,EAAWU,OAAO,KAG7BuB,UAAW,CACTnB,UAAW,SAAC1B,GAAa,OAAKS,EAAAA,EAAAA,IAAW,IAAIqC,IAAJ,CAAc9C,GAAO,IAGlE,CACEyC,SAAU,QACVT,KAAMnB,GAAYC,EAAc,GAAKP,EAAAA,GAAAA,EAAO,uBAC5C+B,KAAM,QACNI,OAAO,EACPC,SAAU,CACRC,UAAW,CACTtC,MAAOM,EAAWU,OAAO,KAG7BuB,UAAW,CACTnB,UAAW,SAAC1B,GAAa,OAAKS,EAAAA,EAAAA,IAAW,IAAIqC,IAAJ,CAAc9C,GAAO,KAIpE+C,OAAQ,CACN,CACEf,KAAMzB,EAAAA,GAAAA,EAAO,uBACb+B,KAAM,OACNU,WAAY,EACZC,OAAQnC,EAAc,OAAS,SAC/BoC,WAAY,EACZC,OAAQ,CACNC,EAAG,YACHC,EAAG,SAGP,CACErB,KAAMzB,EAAAA,GAAAA,EAAO,uBACb+B,KAAM,OACNU,WAAY,EACZC,OAAQnC,EAAc,OAAS,SAC/BoC,WAAY,EACZC,OAAQ,CACNC,EAAG,YACHC,EAAG,SAITC,QAAS,CACPC,OAAQ5C,EAAoB6C,KAAI,SAAAnD,GAAI,MAAI,EACtCoD,EAAAA,EAAAA,IAAgBpD,EAAKqD,wBACrB,IAAIZ,IAAJ,CAAczC,EAAKsD,gBAAgBC,WACnC,IAAId,IAAJ,CAAczC,EAAKwD,eAAeD,WACnC,IACDE,WAAY,CAAC,YAAa,OAAQ,QAGxC,EAEMC,EAAQ,SAACpD,GAA+C,OAC5DA,EACIA,EAAoB6C,KAAI,SAAAnD,GAAI,MAAI,CAACA,EAAKqD,uBAAwBrD,EAAKsD,eAAgBtD,EAAKwD,cAAc,IACtG,EAAE,EAEKG,EAAiB,SAAH,GAA4D,IAAD,IAArDlD,YAAAA,OAAW,OAAQ,EAClD,GAAYmD,EAAAA,EAAAA,KAALC,GAAqB,YAApB,GACR,OACE,SAAC,KAAc,CACbC,MAAOD,EAAE,wBACTpD,YAAaA,EACbsD,UAAWC,EAAAA,GACXC,gBAAiB5D,EACjBqD,MAAOA,EACPQ,SAAUC,EAAAA,EAAAA,UACVC,UAAU,QAGhB,EAEA,W,6TCpKaC,EAAmBC,EAAAA,GAAAA,IAAU,sEAK7BC,EAAmBD,EAAAA,GAAAA,IAAU,+7BAqD7BE,EAAeF,EAAAA,GAAAA,IAAU,8HAG1B,SAACG,GAAgC,OAAMA,EAAMhE,YAAc,QAAU,MAAM,IAK1EiE,EAAmBJ,EAAAA,GAAAA,IAAU,qbAK/B,SAACG,GAAgC,OAAMA,EAAMhE,YAAc,OAAS,OAAO,IAC1E,SAACgE,GAAgC,OAAMA,EAAMhE,YAAc,OAAS,OAAO,IAG/D,SAAAgE,GAAK,OAAIA,EAAME,MAAMC,OAAO,IAIvC,SAACH,GAAgC,OAAMA,EAAMhE,YAAc,SAAW,MAAM,IAC3E,SAACgE,GAAgC,OAAMA,EAAMhE,YAAc,OAAS,MAAM,IAO3E,SAAAgE,GAAK,OAAIA,EAAME,MAAMC,OAAO,IAI5BC,EAAiBP,EAAAA,GAAAA,IAAU,kI,8GCjElCQ,EAAc,SAAH,GAAiB,SAAXrE,aAA4D,SAACsE,EAAA,EAAY,KAAM,SAACC,EAAA,EAAO,CAACC,MAAI,GAAG,EAEhHC,EAAe,SAAH,OAAMD,EAAI,EAAJA,KAAK,EAAD,EAAExE,YAAAA,OAAW,OAAQ,SAC/C,SAAC+D,EAAY,CAAC/D,YAAaA,EAAY,SACpCwE,GACC,SAACH,EAAW,CAACrE,YAAaA,KAE1B,UAACiE,EAAgB,CAACjE,YAAaA,EAAY,WACzC,gBAAK0E,IAAI,UAAUC,KAAKC,EAAAA,EAAAA,M,imDACxB,0BAAOnF,EAAAA,GAAAA,EAAO,2BAGL,EAGXoF,EAAiB,SAAH,GAgBb,IAfLC,EAAM,EAANA,OACA9E,EAAW,EAAXA,YACA+E,EAAU,EAAVA,WAAW,EAAD,EACVC,SAAAA,OAAQ,OAAQ,MAChBC,WAAAA,OAAU,OAAQ,EAClBC,EAAK,EAALA,MAAM,EAAD,EACLC,UAAAA,OAAS,MAAG,GAAE,EAURC,GAAWC,EAAAA,EAAAA,QAAuB,MAClCC,GAAmBD,EAAAA,EAAAA,QAAuB,MAC1CE,GAAaC,EAAAA,EAAAA,IAAYV,GACzBW,GAAiBD,EAAAA,EAAAA,IAAYT,GAmCnC,OAjCAW,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAgC,KACpC,GAAIP,EAASQ,QAAS,CACpB,IAAKN,EAAiBM,QAAS,CAC7B,IAAMC,EAAmBC,IAAAA,iBAAyBV,EAASQ,SACvDC,GACFA,EAAiBE,UAEnBT,EAAiBM,QAAUE,IAAAA,KAAaV,EAASQ,QACnD,CACAD,EAAgBL,EAAiBM,QACjC,KACOI,EAAAA,EAAAA,IAAYT,EAAYT,EAAQ,CAAC,eACpCa,EAAcM,UAAUnB,EAAQ,CAAEE,SAAAA,EAAUC,WAAAA,IAE1CF,GAAoC,oBAAfA,GAA6BA,IAAeU,GACnEE,EAAcO,GAAG,QAASnB,EAO9B,CALE,MAAOoB,GACPC,QAAQD,MAAM,QAASA,GACnBR,GACFA,EAAcI,SAElB,CACF,CACF,GAAG,CAAChB,EAAYE,EAAYD,EAAUF,EAAQW,EAAgBF,KAE9Dc,EAAAA,EAAAA,KAAgB,WACiB,IAAD,EAA1Bf,EAAiBM,UACK,QAAxB,EAAAN,EAAiBM,eAAO,OAAxB,EAA0BU,SAE9B,KAEO,gBAAKpB,OAAK,QAAIqB,OAAQvG,EAAc,QAAU,QAAWkF,GAASC,UAAWA,EAAWqB,IAAKpB,GACtG,EAcMqB,EAAY,SAAH,GAUR,IATLpD,EAAK,EAALA,MACAqD,EAAQ,EAARA,SACAC,EAAW,EAAXA,YAQMC,EAvBU,SAACrH,GACjB,GAAKA,GAAwB,IAAhBA,EAAKsH,OAAlB,CAGA,IAAID,EAAM,GAKV,OAJArH,EAAKyB,SAAQ,SAAA8F,GACXF,GAAOE,EAAIC,KAAK,KAChBH,GAAO,IACT,IACOA,CANP,CAOF,CAacI,CAPR,EAAJzH,MAQM0H,GAAY5D,EAAM6D,QAAQ,MAAQ,EAAI7D,EAAM8D,UAAU,EAAG9D,EAAM6D,QAAQ,OAAS7D,GACnF+D,QAAQ,KAAM,IACdC,cACAD,QAAQ,OAAQ,KACnB,OACE,UAACE,EAAA,EAAO,YACN,UAACxD,EAAgB,CAACqB,UAAU,YAAW,WACrC,iBAAKA,UAAU,8BAA6B,WAC1C,0BAAO9B,IACNsD,IACC,SAAC,IAAO,CAACY,UAAU,SAASlE,MAAOsD,EAAY,UAC7C,gBAAKhC,IAAK6C,EAAU9C,IAAI,oBAI7BkC,IACC,cACEzB,UAAU,iCACVsC,IAAI,sBACJC,KAAI,sCAAiCC,UAAUf,IAC/CgB,OAAO,SACPC,SAAQ,UAAKZ,EAAQ,QAAO,SAE3BxH,EAAAA,GAAAA,EAAO,iCAId,SAACmE,EAAgB,CAACuB,UAAU,YAAW,SAAEuB,MAG/C,EAqBO,SAASoB,EAAc,GAYY,IAXxCzE,EAAK,EAALA,MACAsD,EAAW,EAAXA,YACAoB,EAAI,EAAJA,KAAK,EAAD,EACJ/H,YAAAA,OAAW,OAAQ,EACnBgI,EAAU,EAAVA,WACA1E,EAAS,EAATA,UACA2E,EAAS,EAATA,UACAzE,EAAe,EAAfA,gBACAP,EAAK,EAALA,MACAQ,EAAQ,EAARA,SAAS,EAAD,EACRE,UAAAA,OAAS,MAAG,UAAS,EAEf5D,GAAWmI,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,MAARD,IAEFE,GAAQC,EAAAA,EAAAA,IAAuBhF,EAAWG,EAAUE,GACpD9C,GAAW0H,EAAAA,EAAAA,UAAQ,wBAAgB,QAAhB,EAAMF,EAAM9I,YAAI,QAAI,EAAE,GAAE,CAAC8I,EAAM9I,QACxDmG,EAAAA,EAAAA,YAAU,WACJuC,GAAaI,EAAM9I,MACrB0I,EAAUI,EAAM9I,KAEpB,GAAG,CAAC0I,EAAWI,EAAM9I,OAErB,IAAMuF,GAASyD,EAAAA,EAAAA,UACb,kBAAM/E,EAAgB3C,EAAUsH,EAAIrI,WAAYC,EAAUC,EAAY,GACtE,CAACmI,EAAIrI,WAAYe,EAAU2C,EAAiBzD,EAAUC,IAGlDwI,EAAUH,EAAMI,WACpB,SAAChE,EAAY,CAACD,MAAI,EAACxE,YAAaA,KAEhC,SAAC6E,GAAc,QAACC,OAAQA,EAAQ9E,YAAaA,GAAiBgI,IAGhE,OAAOhI,EACLwI,GAEA,UAAC/B,EAAS,CAACpD,MAAOA,EAAOsD,YAAaA,EAAapH,KAAM0D,EAAMpC,GAAU,UACtE2H,EACQ,MAART,IAAgB,SAAC3D,EAAc,UAAE2D,MAGxC,CAEA,IAAMrI,EAAe,SAACF,GAAa,8JACgHA,EAAK,cAElJL,EAAe,SAACD,EAAewJ,GAAa,mCAC1BA,EAAK,qCAA6BxJ,EAAK,Y,iIC/NlDkC,EAAmB,CAC9B,CACEoD,MAAM,EACNmE,UAAU,EACVC,MAAO,EACPC,IAAK,IACLC,WAAY,CAAC,IAEf,CACEtH,KAAM,SACNmH,UAAU,EACVC,MAAO,EACPC,IAAK,IACLC,WAAY,CAAC,KAIJnJ,EAAa,SAACT,EAAoC6J,EAAkBC,GAC/E,IAAMC,EAA4B,kBAAV/J,GAAuC,kBAAVA,EAAqB,IAAI8C,IAAJ,CAAc9C,GAASA,EACjG,GAAI+J,EAASC,SAAWD,EAASE,SAAU,MAAO,IAClD,IAAMC,EAAKH,EAASI,UAAU,KACxBC,EAAKF,EAAGC,UAAU,KAClBE,EAAKD,EAAGD,UAAU,KAClBG,EAAKD,EAAGF,UAAU,KAClBI,EAAKD,EAAGH,UAAU,KAClBK,EAAKD,EAAGJ,UAAU,KAClBM,EAAKD,EAAGL,UAAU,KAClBO,EAAKD,EAAGN,UAAU,KAExB,OAAIO,EAAGC,uBAAuB,GACtB,GAAN,YAAsBnJ,IAAZqI,EAAwBa,EAAGE,QAAQf,GAAWa,EAAGE,UAAS,KAElEH,EAAGE,uBAAuB,GACtB,GAAN,YAAsBnJ,IAAZqI,EAAwBY,EAAGG,QAAQf,GAAWY,EAAGG,UAAS,KAElEJ,EAAGG,uBAAuB,GACtB,GAAN,YAAsBnJ,IAAZqI,EAAwBW,EAAGI,QAAQf,GAAWW,EAAGI,UAAS,KAElEL,EAAGI,uBAAuB,GACtB,GAAN,YAAsBnJ,IAAZqI,EAAwBU,EAAGK,QAAQf,GAAWU,EAAGK,UAAS,KAElEN,EAAGK,uBAAuB,GACtB,GAAN,YAAsBnJ,IAAZqI,EAAwBS,EAAGM,QAAQf,GAAWS,EAAGM,UAAS,KAElEP,EAAGM,uBAAuB,GACtB,GAAN,YAAsBnJ,IAAZqI,EAAwBQ,EAAGO,QAAQf,GAAWQ,EAAGO,UAAS,KAElER,EAAGO,uBAAuB,GACtB,GAAN,YAAsBnJ,IAAZqI,EAAwBO,EAAGQ,QAAQf,GAAWO,EAAGQ,UAAS,KAElEV,EAAGS,uBAAuB,GACtB,GAAN,YAAsBnJ,IAAZqI,EAAwBK,EAAGU,QAAQf,GAAWK,EAAGU,UAAS,KAEhE,GAAN,OAAUf,IAAYC,EAAWC,EAASa,QAAQf,GAAWE,EAASa,UACxE,EAEaC,EAAqB,SAAC7K,EAAoC8K,GACrE,IAAMf,EAA4B,kBAAV/J,GAAuC,kBAAVA,EAAqB,IAAI8C,IAAJ,CAAc9C,GAASA,EACjG,MAAM,IAAN,OAAW+J,EAASY,uBAAuB,KAAQlK,EAAWsJ,EAASI,UAAU,IAAK,GAAK,IAAG,aAAK1J,EACjGT,EACA,IACD,OAAG8K,GAAU,GAAE,IAClB,C","sources":["pages/StatisticsChart/activities/CellCount.tsx","pages/StatisticsChart/common/styled.tsx","pages/StatisticsChart/common/index.tsx","utils/chart.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticCellCount } from '../../../service/http/fetcher'\n\nconst widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 60 : 80)\n\nconst parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: [string, string, string] }): string => {\n  if (seriesName === i18n.t('statistic.live_cell')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.live_cell'))} ${handleAxis(data[1], 2)}</div>`\n  }\n  if (seriesName === i18n.t('statistic.all_cells')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.all_cells'))} ${handleAxis(data[2], 2)}</div>`\n  }\n  return ''\n}\n\nconst getOption = (\n  statisticCellCounts: State.StatisticCellCount[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '4%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: [string, string, string] }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              list[0].data[0]\n            }</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: !isThumbnail\n      ? {\n          data: [\n            {\n              name: i18n.t('statistic.live_cell'),\n            },\n            {\n              name: i18n.t('statistic.all_cells'),\n            },\n          ],\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.live_cell'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n      {\n        position: 'right',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.all_cells'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[1],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.live_cell'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'live',\n        },\n      },\n      {\n        name: i18n.t('statistic.all_cells'),\n        type: 'line',\n        yAxisIndex: 1,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'all',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticCellCounts.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(data.liveCellsCount).toNumber(),\n        new BigNumber(data.allCellsCount).toNumber(),\n      ]),\n      dimensions: ['timestamp', 'live', 'all'],\n    },\n  }\n}\n\nconst toCSV = (statisticCellCounts: State.StatisticCellCount[]) =>\n  statisticCellCounts\n    ? statisticCellCounts.map(data => [data.createdAtUnixtimestamp, data.liveCellsCount, data.allCellsCount])\n    : []\n\nexport const CellCountChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.cell_count')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticCellCount}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.CellCount}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default CellCountChart\n","import styled from 'styled-components'\n\nexport const ChartDetailPanel = styled.div`\n  margin-bottom: 30px;\n  background: white;\n`\n\nexport const ChartDetailTitle = styled.div`\n  background: white;\n  margin-top: 30px;\n  padding: 10px 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media (max-width: 750px) {\n    margin-top: 20px;\n  }\n\n  .chart__detail__title__panel {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex: 1;\n\n    > span {\n      color: #000000;\n      text-align: center;\n      font-size: 24px;\n      margin-left: 100px;\n\n      @media (max-width: 750px) {\n        font-size: 16px;\n        margin-left: 0px;\n      }\n    }\n\n    > img {\n      width: 18px;\n      height: 18px;\n      margin-left: 10px;\n    }\n  }\n\n  .chart__detail__title__download {\n    width: 100px;\n    padding: 5px 0;\n    border-radius: 2px;\n    border: solid 1px #666666;\n    font-size: 12px;\n    text-align: center;\n    color: #666666;\n    margin-right: 3.6%;\n\n    @media (max-width: 750px) {\n      display: none;\n    }\n  }\n`\n\nexport const LoadingPanel = styled.div`\n  display: flex;\n  width: 100%;\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '200px' : '70vh')};\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ChartNoDataPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '92px' : '184px')};\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '56px' : '112px')};\n  border-radius: 6px;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.12);\n  border: solid 0.5px ${props => props.theme.primary};\n  background-color: #ffffff;\n\n  > img {\n    width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '18.5px' : '37px')};\n    height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '14px' : '28px')};\n  }\n\n  > span {\n    font-size: 12px;\n    font-weight: 500;\n    margin-top: 5px;\n    color: ${props => props.theme.primary};\n  }\n`\n\nexport const ChartNotePanel = styled.div`\n  font-size: 12px;\n  with: 100%;\n  color: rgba(0, 0, 0, 0.6);\n  padding: 6px 3%;\n  text-align: left;\n`\n","import { ComponentProps, CSSProperties, ReactElement, ReactNode, useEffect, useMemo, useRef } from 'react'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/chart/bar'\nimport 'echarts/lib/chart/pie'\nimport 'echarts/lib/chart/map'\nimport 'echarts/lib/chart/scatter'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/markLine'\nimport 'echarts/lib/component/dataZoom'\nimport 'echarts/lib/component/brush'\nimport echarts from 'echarts/lib/echarts'\nimport { Tooltip } from 'antd'\nimport { EChartOption, ECharts } from 'echarts'\nimport { LoadingPanel, ChartNoDataPanel, ChartDetailTitle, ChartDetailPanel, ChartNotePanel } from './styled'\nimport Loading from '../../../components/Loading'\nimport ChartNoDataImage from '../../../assets/chart_no_data.png'\nimport ChartNoDataAggronImage from '../../../assets/chart_no_data_aggron.png'\nimport HelpIcon from '../../../assets/qa_help.png'\nimport { isMainnet } from '../../../utils/chain'\nimport SmallLoading from '../../../components/Loading/SmallLoading'\nimport i18n from '../../../utils/i18n'\nimport Content from '../../../components/Content'\nimport { useChartQueryWithCache, useIsMobile, usePrevious, useWindowResize } from '../../../utils/hook'\nimport { useAppState } from '../../../contexts/providers'\nimport { isDeepEqual } from '../../../utils/util'\n\nconst LoadingComp = ({ isThumbnail }: { isThumbnail?: boolean }) => (isThumbnail ? <SmallLoading /> : <Loading show />)\n\nconst ChartLoading = ({ show, isThumbnail = false }: { show: boolean; isThumbnail?: boolean }) => (\n  <LoadingPanel isThumbnail={isThumbnail}>\n    {show ? (\n      <LoadingComp isThumbnail={isThumbnail} />\n    ) : (\n      <ChartNoDataPanel isThumbnail={isThumbnail}>\n        <img alt=\"no data\" src={isMainnet() ? ChartNoDataImage : ChartNoDataAggronImage} />\n        <span>{i18n.t('statistic.no_data')}</span>\n      </ChartNoDataPanel>\n    )}\n  </LoadingPanel>\n)\n\nconst ReactChartCore = ({\n  option,\n  isThumbnail,\n  clickEvent,\n  notMerge = false,\n  lazyUpdate = false,\n  style,\n  className = '',\n}: {\n  option: EChartOption\n  isThumbnail?: boolean\n  clickEvent?: any\n  notMerge?: boolean\n  lazyUpdate?: boolean\n  style?: CSSProperties\n  className?: string\n}) => {\n  const chartRef = useRef<HTMLDivElement>(null)\n  const chartInstanceRef = useRef<ECharts | null>(null)\n  const prevOption = usePrevious(option)\n  const prevClickEvent = usePrevious(clickEvent)\n\n  useEffect(() => {\n    let chartInstance: ECharts | null = null\n    if (chartRef.current) {\n      if (!chartInstanceRef.current) {\n        const renderedInstance = echarts.getInstanceByDom(chartRef.current)\n        if (renderedInstance) {\n          renderedInstance.dispose()\n        }\n        chartInstanceRef.current = echarts.init(chartRef.current)\n      }\n      chartInstance = chartInstanceRef.current\n      try {\n        if (!isDeepEqual(prevOption, option, ['formatter'])) {\n          chartInstance.setOption(option, { notMerge, lazyUpdate })\n        }\n        if (clickEvent && typeof clickEvent === 'function' && clickEvent !== prevClickEvent) {\n          chartInstance.on('click', clickEvent)\n        }\n      } catch (error) {\n        console.error('error', error)\n        if (chartInstance) {\n          chartInstance.dispose()\n        }\n      }\n    }\n  }, [clickEvent, lazyUpdate, notMerge, option, prevClickEvent, prevOption])\n\n  useWindowResize(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current?.resize()\n    }\n  })\n\n  return <div style={{ height: isThumbnail ? '200px' : '70vh', ...style }} className={className} ref={chartRef} />\n}\n\nconst dataToCsv = (data: any[] | undefined) => {\n  if (!data || data.length === 0) {\n    return undefined\n  }\n  let csv = ''\n  data.forEach(row => {\n    csv += row.join(',')\n    csv += '\\n'\n  })\n  return csv\n}\n\nconst ChartPage = ({\n  title,\n  children,\n  description,\n  data,\n}: {\n  title: string\n  children: ReactNode\n  description?: string\n  data?: (string | number)[][]\n}) => {\n  const csv = dataToCsv(data)\n  const fileName = (title.indexOf(' (') > 0 ? title.substring(0, title.indexOf(' (')) : title)\n    .replace(/&/g, '')\n    .toLowerCase()\n    .replace(/\\s+/g, '-')\n  return (\n    <Content>\n      <ChartDetailTitle className=\"container\">\n        <div className=\"chart__detail__title__panel\">\n          <span>{title}</span>\n          {description && (\n            <Tooltip placement=\"bottom\" title={description}>\n              <img src={HelpIcon} alt=\"chart help\" />\n            </Tooltip>\n          )}\n        </div>\n        {csv && (\n          <a\n            className=\"chart__detail__title__download\"\n            rel=\"noopener noreferrer\"\n            href={`data:text/csv;charset=utf-8,${encodeURI(csv)}`}\n            target=\"_blank\"\n            download={`${fileName}.csv`}\n          >\n            {i18n.t('statistic.download_data')}\n          </a>\n        )}\n      </ChartDetailTitle>\n      <ChartDetailPanel className=\"container\">{children}</ChartDetailPanel>\n    </Content>\n  )\n}\n\nexport interface SmartChartPageProps<T> {\n  title: string\n  description?: string\n  note?: string\n  isThumbnail?: boolean\n  chartProps?: Partial<ComponentProps<typeof ReactChartCore>>\n  fetchData: () => Promise<T[] | Response.Response<Response.Wrapper<T>[]>>\n  onFetched?: (dataList: T[]) => void\n  getEChartOption: (\n    dataList: T[],\n    chartColor: State.App['chartColor'],\n    isMobile: boolean,\n    isThumbnail: boolean,\n  ) => echarts.EChartOption\n  toCSV: (dataList: T[]) => (string | number)[][]\n  cacheKey?: string\n  cacheMode?: 'forever' | 'date' | 'epoch'\n}\n\nexport function SmartChartPage<T>({\n  title,\n  description,\n  note,\n  isThumbnail = false,\n  chartProps,\n  fetchData,\n  onFetched,\n  getEChartOption,\n  toCSV,\n  cacheKey,\n  cacheMode = 'forever',\n}: SmartChartPageProps<T>): ReactElement {\n  const isMobile = useIsMobile()\n  const { app } = useAppState()\n\n  const query = useChartQueryWithCache(fetchData, cacheKey, cacheMode)\n  const dataList = useMemo(() => query.data ?? [], [query.data])\n  useEffect(() => {\n    if (onFetched && query.data) {\n      onFetched(query.data)\n    }\n  }, [onFetched, query.data])\n\n  const option = useMemo(\n    () => getEChartOption(dataList, app.chartColor, isMobile, isThumbnail),\n    [app.chartColor, dataList, getEChartOption, isMobile, isThumbnail],\n  )\n\n  const content = query.isLoading ? (\n    <ChartLoading show isThumbnail={isThumbnail} />\n  ) : (\n    <ReactChartCore option={option} isThumbnail={isThumbnail} {...chartProps} />\n  )\n\n  return isThumbnail ? (\n    content\n  ) : (\n    <ChartPage title={title} description={description} data={toCSV(dataList)}>\n      {content}\n      {note != null && <ChartNotePanel>{note}</ChartNotePanel>}\n    </ChartPage>\n  )\n}\n\nconst tooltipColor = (color: string) =>\n  `<span style=\"display:inline-block;margin-right:8px;margin-left:5px;margin-bottom:2px;border-radius:10px;width:6px;height:6px;background-color:${color}\"></span>`\n\nconst tooltipWidth = (value: string, width: number) =>\n  `<span style=\"width:${width}px;display:inline-block;\">${value}:</span>`\n\nexport type SeriesItem = { seriesName: string; name: string; color: string; dataIndex: number }\n\nexport { ChartLoading, ReactChartCore, ChartPage, tooltipColor, tooltipWidth }\n","import BigNumber from 'bignumber.js'\n\nexport const DATA_ZOOM_CONFIG = [\n  {\n    show: true,\n    realtime: true,\n    start: 0,\n    end: 100,\n    xAxisIndex: [0],\n  },\n  {\n    type: 'inside',\n    realtime: true,\n    start: 0,\n    end: 100,\n    xAxisIndex: [0],\n  },\n]\n\nexport const handleAxis = (value: BigNumber | string | number, decimal?: number, hideZero?: boolean) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  if (bigValue.isNaN() || bigValue.isZero()) return '0'\n  const kv = bigValue.dividedBy(1000)\n  const mv = kv.dividedBy(1000)\n  const gv = mv.dividedBy(1000)\n  const tv = gv.dividedBy(1000)\n  const pv = tv.dividedBy(1000)\n  const ev = pv.dividedBy(1000)\n  const zv = ev.dividedBy(1000)\n  const yv = zv.dividedBy(1000)\n\n  if (yv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? yv.toFixed(decimal) : yv.toFixed()}Y`\n  }\n  if (zv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? zv.toFixed(decimal) : zv.toFixed()}Z`\n  }\n  if (ev.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? ev.toFixed(decimal) : ev.toFixed()}E`\n  }\n  if (pv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? pv.toFixed(decimal) : pv.toFixed()}P`\n  }\n  if (tv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? tv.toFixed(decimal) : tv.toFixed()}T`\n  }\n  if (gv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? gv.toFixed(decimal) : gv.toFixed()}G`\n  }\n  if (mv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? mv.toFixed(decimal) : mv.toFixed()}M`\n  }\n  if (kv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? kv.toFixed(decimal) : kv.toFixed()}K`\n  }\n  return `${decimal && !hideZero ? bigValue.toFixed(decimal) : bigValue.toFixed()}`\n}\n\nexport const handleLogGroupAxis = (value: BigNumber | string | number, suffix?: string) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  return `[${bigValue.isGreaterThanOrEqualTo(1000) ? handleAxis(bigValue.dividedBy(10), 0) : '0'}, ${handleAxis(\n    value,\n    0,\n  )}${suffix || ''}]`\n}\n\nexport const handleStepGroupAxis = (value: BigNumber | string | number, step?: number, suffix?: string) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  return `[${bigValue.minus(step || 100)}, ${value}${suffix || ''}]`\n}\n\nexport const parseInterval = (max: number, min: number) => {\n  const count = 20\n  const interval = (max - min) / count\n  const { length } = Math.ceil(interval).toString()\n  const factor = 10 ** (length > 2 ? length - 2 : 0)\n  return (Math.ceil(interval / factor) + 1) * factor\n}\n"],"names":["widthSpan","value","tooltipWidth","currentLanguage","parseTooltip","seriesName","data","color","i18n","tooltipColor","handleAxis","getOption","statisticCellCounts","chartColor","isMobile","isThumbnail","gridThumbnail","left","right","top","bottom","containLabel","grid","colors","tooltip","undefined","trigger","formatter","dataList","list","result","forEach","legend","name","dataZoom","DATA_ZOOM_CONFIG","xAxis","nameLocation","nameGap","type","boundaryGap","yAxis","position","scale","axisLine","lineStyle","axisLabel","BigNumber","series","yAxisIndex","symbol","symbolSize","encode","x","y","dataset","source","map","parseDateNoTime","createdAtUnixtimestamp","liveCellsCount","toNumber","allCellsCount","dimensions","toCSV","CellCountChart","useTranslation","t","title","fetchData","fetchStatisticCellCount","getEChartOption","cacheKey","ChartCachedKeys","cacheMode","ChartDetailPanel","styled","ChartDetailTitle","LoadingPanel","props","ChartNoDataPanel","theme","primary","ChartNotePanel","LoadingComp","SmallLoading","Loading","show","ChartLoading","alt","src","isMainnet","ReactChartCore","option","clickEvent","notMerge","lazyUpdate","style","className","chartRef","useRef","chartInstanceRef","prevOption","usePrevious","prevClickEvent","useEffect","chartInstance","current","renderedInstance","echarts","dispose","isDeepEqual","setOption","on","error","console","useWindowResize","resize","height","ref","ChartPage","children","description","csv","length","row","join","dataToCsv","fileName","indexOf","substring","replace","toLowerCase","Content","placement","HelpIcon","rel","href","encodeURI","target","download","SmartChartPage","note","chartProps","onFetched","useIsMobile","app","useAppState","query","useChartQueryWithCache","useMemo","content","isLoading","width","realtime","start","end","xAxisIndex","decimal","hideZero","bigValue","isNaN","isZero","kv","dividedBy","mv","gv","tv","pv","ev","zv","yv","isGreaterThanOrEqualTo","toFixed","handleLogGroupAxis","suffix"],"sourceRoot":""}