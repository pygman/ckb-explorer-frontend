{"version":3,"file":"static/js/3882.038dcefa.chunk.js","mappings":"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","sources":["pages/StatisticsChart/block/BlockTimeDistribution.tsx","pages/StatisticsChart/common/styled.tsx","pages/StatisticsChart/common/index.tsx","utils/chart.ts"],"sourcesContent":["import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticBlockTimeDistribution } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticBlockTimeDistributions: State.StatisticBlockTimeDistribution[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '5%',\n    right: '3%',\n    top: isMobile ? '3%' : '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 80 : 80)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.time'))} ${\n              dataList[0].name\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.block_count'))} ${\n              dataList[0].data\n            }%</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.time'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        data: statisticBlockTimeDistributions.map(data => data.time),\n        axisLabel: {\n          interval: 49,\n          formatter: (value: string) => Number(value).toFixed(0),\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.block_count'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${value}%`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.block_count'),\n        type: 'line',\n        yAxisIndex: 0,\n        areaStyle: {\n          color: chartColor.areaColor,\n        },\n        barWidth: isMobile || isThumbnail ? 10 : 20,\n        data: statisticBlockTimeDistributions.map(data => (Number(data.ratio) * 100).toFixed(3)),\n      },\n    ],\n  }\n}\n\nconst fetchStatisticBlockTimeDistributions = async () => {\n  const {\n    attributes: { blockTimeDistribution },\n  } = await fetchStatisticBlockTimeDistribution()\n  const sumBlocks = blockTimeDistribution\n    .flatMap(data => Number(data[1]))\n    .reduce((previous, current) => previous + current)\n  const statisticBlockTimeDistributions = [\n    {\n      time: '0',\n      ratio: '0',\n    },\n  ].concat(\n    blockTimeDistribution.map(data => {\n      const [time, blocks] = data\n      return {\n        time,\n        ratio: (Number(blocks) / sumBlocks).toFixed(5),\n      }\n    }),\n  )\n  return statisticBlockTimeDistributions\n}\n\nconst toCSV = (statisticBlockTimeDistributions: State.StatisticBlockTimeDistribution[]) =>\n  statisticBlockTimeDistributions\n    ? statisticBlockTimeDistributions.map(data => [data.time, Number(data.ratio).toFixed(4)])\n    : []\n\nexport const BlockTimeDistributionChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.block_time_distribution_more')}\n      description={t('statistic.block_time_distribution_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticBlockTimeDistributions}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.BlockTimeDistribution}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default BlockTimeDistributionChart\n","import styled from 'styled-components'\n\nexport const ChartDetailPanel = styled.div`\n  margin-bottom: 30px;\n  background: white;\n`\n\nexport const ChartDetailTitle = styled.div`\n  background: white;\n  margin-top: 30px;\n  padding: 10px 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media (max-width: 750px) {\n    margin-top: 20px;\n  }\n\n  .chart__detail__title__panel {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex: 1;\n\n    > span {\n      color: #000000;\n      text-align: center;\n      font-size: 24px;\n      margin-left: 100px;\n\n      @media (max-width: 750px) {\n        font-size: 16px;\n        margin-left: 0px;\n      }\n    }\n\n    > img {\n      width: 18px;\n      height: 18px;\n      margin-left: 10px;\n    }\n  }\n\n  .chart__detail__title__download {\n    width: 100px;\n    padding: 5px 0;\n    border-radius: 2px;\n    border: solid 1px #666666;\n    font-size: 12px;\n    text-align: center;\n    color: #666666;\n    margin-right: 3.6%;\n\n    @media (max-width: 750px) {\n      display: none;\n    }\n  }\n`\n\nexport const LoadingPanel = styled.div`\n  display: flex;\n  width: 100%;\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '200px' : '70vh')};\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ChartNoDataPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '92px' : '184px')};\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '56px' : '112px')};\n  border-radius: 6px;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.12);\n  border: solid 0.5px ${props => props.theme.primary};\n  background-color: #ffffff;\n\n  > img {\n    width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '18.5px' : '37px')};\n    height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '14px' : '28px')};\n  }\n\n  > span {\n    font-size: 12px;\n    font-weight: 500;\n    margin-top: 5px;\n    color: ${props => props.theme.primary};\n  }\n`\n\nexport const ChartNotePanel = styled.div`\n  font-size: 12px;\n  with: 100%;\n  color: rgba(0, 0, 0, 0.6);\n  padding: 6px 3%;\n  text-align: left;\n`\n","import { ComponentProps, CSSProperties, ReactElement, ReactNode, useEffect, useMemo, useRef } from 'react'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/chart/bar'\nimport 'echarts/lib/chart/pie'\nimport 'echarts/lib/chart/map'\nimport 'echarts/lib/chart/scatter'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/markLine'\nimport 'echarts/lib/component/dataZoom'\nimport 'echarts/lib/component/brush'\nimport echarts from 'echarts/lib/echarts'\nimport { Tooltip } from 'antd'\nimport { EChartOption, ECharts } from 'echarts'\nimport { LoadingPanel, ChartNoDataPanel, ChartDetailTitle, ChartDetailPanel, ChartNotePanel } from './styled'\nimport Loading from '../../../components/Loading'\nimport ChartNoDataImage from '../../../assets/chart_no_data.png'\nimport ChartNoDataAggronImage from '../../../assets/chart_no_data_aggron.png'\nimport HelpIcon from '../../../assets/qa_help.png'\nimport { isMainnet } from '../../../utils/chain'\nimport SmallLoading from '../../../components/Loading/SmallLoading'\nimport i18n from '../../../utils/i18n'\nimport Content from '../../../components/Content'\nimport { useChartQueryWithCache, useIsMobile, usePrevious, useWindowResize } from '../../../utils/hook'\nimport { useAppState } from '../../../contexts/providers'\nimport { isDeepEqual } from '../../../utils/util'\n\nconst LoadingComp = ({ isThumbnail }: { isThumbnail?: boolean }) => (isThumbnail ? <SmallLoading /> : <Loading show />)\n\nconst ChartLoading = ({ show, isThumbnail = false }: { show: boolean; isThumbnail?: boolean }) => (\n  <LoadingPanel isThumbnail={isThumbnail}>\n    {show ? (\n      <LoadingComp isThumbnail={isThumbnail} />\n    ) : (\n      <ChartNoDataPanel isThumbnail={isThumbnail}>\n        <img alt=\"no data\" src={isMainnet() ? ChartNoDataImage : ChartNoDataAggronImage} />\n        <span>{i18n.t('statistic.no_data')}</span>\n      </ChartNoDataPanel>\n    )}\n  </LoadingPanel>\n)\n\nconst ReactChartCore = ({\n  option,\n  isThumbnail,\n  clickEvent,\n  notMerge = false,\n  lazyUpdate = false,\n  style,\n  className = '',\n}: {\n  option: EChartOption\n  isThumbnail?: boolean\n  clickEvent?: any\n  notMerge?: boolean\n  lazyUpdate?: boolean\n  style?: CSSProperties\n  className?: string\n}) => {\n  const chartRef = useRef<HTMLDivElement>(null)\n  const chartInstanceRef = useRef<ECharts | null>(null)\n  const prevOption = usePrevious(option)\n  const prevClickEvent = usePrevious(clickEvent)\n\n  useEffect(() => {\n    let chartInstance: ECharts | null = null\n    if (chartRef.current) {\n      if (!chartInstanceRef.current) {\n        const renderedInstance = echarts.getInstanceByDom(chartRef.current)\n        if (renderedInstance) {\n          renderedInstance.dispose()\n        }\n        chartInstanceRef.current = echarts.init(chartRef.current)\n      }\n      chartInstance = chartInstanceRef.current\n      try {\n        if (!isDeepEqual(prevOption, option, ['formatter'])) {\n          chartInstance.setOption(option, { notMerge, lazyUpdate })\n        }\n        if (clickEvent && typeof clickEvent === 'function' && clickEvent !== prevClickEvent) {\n          chartInstance.on('click', clickEvent)\n        }\n      } catch (error) {\n        console.error('error', error)\n        if (chartInstance) {\n          chartInstance.dispose()\n        }\n      }\n    }\n  }, [clickEvent, lazyUpdate, notMerge, option, prevClickEvent, prevOption])\n\n  useWindowResize(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current?.resize()\n    }\n  })\n\n  return <div style={{ height: isThumbnail ? '200px' : '70vh', ...style }} className={className} ref={chartRef} />\n}\n\nconst dataToCsv = (data: any[] | undefined) => {\n  if (!data || data.length === 0) {\n    return undefined\n  }\n  let csv = ''\n  data.forEach(row => {\n    csv += row.join(',')\n    csv += '\\n'\n  })\n  return csv\n}\n\nconst ChartPage = ({\n  title,\n  children,\n  description,\n  data,\n}: {\n  title: string\n  children: ReactNode\n  description?: string\n  data?: (string | number)[][]\n}) => {\n  const csv = dataToCsv(data)\n  const fileName = (title.indexOf(' (') > 0 ? title.substring(0, title.indexOf(' (')) : title)\n    .replace(/&/g, '')\n    .toLowerCase()\n    .replace(/\\s+/g, '-')\n  return (\n    <Content>\n      <ChartDetailTitle className=\"container\">\n        <div className=\"chart__detail__title__panel\">\n          <span>{title}</span>\n          {description && (\n            <Tooltip placement=\"bottom\" title={description}>\n              <img src={HelpIcon} alt=\"chart help\" />\n            </Tooltip>\n          )}\n        </div>\n        {csv && (\n          <a\n            className=\"chart__detail__title__download\"\n            rel=\"noopener noreferrer\"\n            href={`data:text/csv;charset=utf-8,${encodeURI(csv)}`}\n            target=\"_blank\"\n            download={`${fileName}.csv`}\n          >\n            {i18n.t('statistic.download_data')}\n          </a>\n        )}\n      </ChartDetailTitle>\n      <ChartDetailPanel className=\"container\">{children}</ChartDetailPanel>\n    </Content>\n  )\n}\n\nexport interface SmartChartPageProps<T> {\n  title: string\n  description?: string\n  note?: string\n  isThumbnail?: boolean\n  chartProps?: Partial<ComponentProps<typeof ReactChartCore>>\n  fetchData: () => Promise<T[] | Response.Response<Response.Wrapper<T>[]>>\n  onFetched?: (dataList: T[]) => void\n  getEChartOption: (\n    dataList: T[],\n    chartColor: State.App['chartColor'],\n    isMobile: boolean,\n    isThumbnail: boolean,\n  ) => echarts.EChartOption\n  toCSV: (dataList: T[]) => (string | number)[][]\n  cacheKey?: string\n  cacheMode?: 'forever' | 'date' | 'epoch'\n}\n\nexport function SmartChartPage<T>({\n  title,\n  description,\n  note,\n  isThumbnail = false,\n  chartProps,\n  fetchData,\n  onFetched,\n  getEChartOption,\n  toCSV,\n  cacheKey,\n  cacheMode = 'forever',\n}: SmartChartPageProps<T>): ReactElement {\n  const isMobile = useIsMobile()\n  const { app } = useAppState()\n\n  const query = useChartQueryWithCache(fetchData, cacheKey, cacheMode)\n  const dataList = useMemo(() => query.data ?? [], [query.data])\n  useEffect(() => {\n    if (onFetched && query.data) {\n      onFetched(query.data)\n    }\n  }, [onFetched, query.data])\n\n  const option = useMemo(\n    () => getEChartOption(dataList, app.chartColor, isMobile, isThumbnail),\n    [app.chartColor, dataList, getEChartOption, isMobile, isThumbnail],\n  )\n\n  const content = query.isLoading ? (\n    <ChartLoading show isThumbnail={isThumbnail} />\n  ) : (\n    <ReactChartCore option={option} isThumbnail={isThumbnail} {...chartProps} />\n  )\n\n  return isThumbnail ? (\n    content\n  ) : (\n    <ChartPage title={title} description={description} data={toCSV(dataList)}>\n      {content}\n      {note != null && <ChartNotePanel>{note}</ChartNotePanel>}\n    </ChartPage>\n  )\n}\n\nconst tooltipColor = (color: string) =>\n  `<span style=\"display:inline-block;margin-right:8px;margin-left:5px;margin-bottom:2px;border-radius:10px;width:6px;height:6px;background-color:${color}\"></span>`\n\nconst tooltipWidth = (value: string, width: number) =>\n  `<span style=\"width:${width}px;display:inline-block;\">${value}:</span>`\n\nexport type SeriesItem = { seriesName: string; name: string; color: string; dataIndex: number }\n\nexport { ChartLoading, ReactChartCore, ChartPage, tooltipColor, tooltipWidth }\n","import BigNumber from 'bignumber.js'\n\nexport const DATA_ZOOM_CONFIG = [\n  {\n    show: true,\n    realtime: true,\n    start: 0,\n    end: 100,\n    xAxisIndex: [0],\n  },\n  {\n    type: 'inside',\n    realtime: true,\n    start: 0,\n    end: 100,\n    xAxisIndex: [0],\n  },\n]\n\nexport const handleAxis = (value: BigNumber | string | number, decimal?: number, hideZero?: boolean) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  if (bigValue.isNaN() || bigValue.isZero()) return '0'\n  const kv = bigValue.dividedBy(1000)\n  const mv = kv.dividedBy(1000)\n  const gv = mv.dividedBy(1000)\n  const tv = gv.dividedBy(1000)\n  const pv = tv.dividedBy(1000)\n  const ev = pv.dividedBy(1000)\n  const zv = ev.dividedBy(1000)\n  const yv = zv.dividedBy(1000)\n\n  if (yv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? yv.toFixed(decimal) : yv.toFixed()}Y`\n  }\n  if (zv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? zv.toFixed(decimal) : zv.toFixed()}Z`\n  }\n  if (ev.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? ev.toFixed(decimal) : ev.toFixed()}E`\n  }\n  if (pv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? pv.toFixed(decimal) : pv.toFixed()}P`\n  }\n  if (tv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? tv.toFixed(decimal) : tv.toFixed()}T`\n  }\n  if (gv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? gv.toFixed(decimal) : gv.toFixed()}G`\n  }\n  if (mv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? mv.toFixed(decimal) : mv.toFixed()}M`\n  }\n  if (kv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? kv.toFixed(decimal) : kv.toFixed()}K`\n  }\n  return `${decimal && !hideZero ? bigValue.toFixed(decimal) : bigValue.toFixed()}`\n}\n\nexport const handleLogGroupAxis = (value: BigNumber | string | number, suffix?: string) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  return `[${bigValue.isGreaterThanOrEqualTo(1000) ? handleAxis(bigValue.dividedBy(10), 0) : '0'}, ${handleAxis(\n    value,\n    0,\n  )}${suffix || ''}]`\n}\n\nexport const handleStepGroupAxis = (value: BigNumber | string | number, step?: number, suffix?: string) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  return `[${bigValue.minus(step || 100)}, ${value}${suffix || ''}]`\n}\n\nexport const parseInterval = (max: number, min: number) => {\n  const count = 20\n  const interval = (max - min) / count\n  const { length } = Math.ceil(interval).toString()\n  const factor = 10 ** (length > 2 ? length - 2 : 0)\n  return (Math.ceil(interval / factor) + 1) * factor\n}\n"],"names":["getOption","statisticBlockTimeDistributions","chartColor","isMobile","isThumbnail","gridThumbnail","left","right","top","bottom","containLabel","grid","color","colors","tooltip","undefined","trigger","formatter","dataList","widthSpan","value","tooltipWidth","currentLanguage","result","tooltipColor","i18n","name","data","dataZoom","DATA_ZOOM_CONFIG","xAxis","nameLocation","nameGap","map","time","axisLabel","interval","Number","toFixed","yAxis","position","type","scale","axisLine","lineStyle","series","yAxisIndex","areaStyle","areaColor","barWidth","ratio","fetchStatisticBlockTimeDistributions","fetchStatisticBlockTimeDistribution","blockTimeDistribution","attributes","sumBlocks","flatMap","reduce","previous","current","concat","blocks","toCSV","BlockTimeDistributionChart","useTranslation","t","title","description","fetchData","getEChartOption","cacheKey","ChartCachedKeys","cacheMode","ChartDetailPanel","styled","ChartDetailTitle","LoadingPanel","props","ChartNoDataPanel","theme","primary","ChartNotePanel","LoadingComp","SmallLoading","Loading","show","ChartLoading","alt","src","isMainnet","ReactChartCore","option","clickEvent","notMerge","lazyUpdate","style","className","chartRef","useRef","chartInstanceRef","prevOption","usePrevious","prevClickEvent","useEffect","chartInstance","renderedInstance","echarts","dispose","isDeepEqual","setOption","on","error","console","useWindowResize","resize","height","ref","ChartPage","children","csv","length","forEach","row","join","dataToCsv","fileName","indexOf","substring","replace","toLowerCase","Content","placement","HelpIcon","rel","href","encodeURI","target","download","SmartChartPage","note","chartProps","onFetched","useIsMobile","app","useAppState","query","useChartQueryWithCache","useMemo","content","isLoading","width","realtime","start","end","xAxisIndex","handleAxis","decimal","hideZero","bigValue","BigNumber","isNaN","isZero","kv","dividedBy","mv","gv","tv","pv","ev","zv","yv","isGreaterThanOrEqualTo","handleLogGroupAxis","suffix"],"sourceRoot":""}