{"version":3,"file":"static/js/8610.81f7122f.chunk.js","mappings":"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","sources":["pages/StatisticsChart/activities/AddressBalanceRank.tsx","pages/StatisticsChart/common/styled.tsx","pages/StatisticsChart/common/index.tsx","utils/chart.ts","utils/number.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { shannonToCkb, shannonToCkbDecimal } from '../../../utils/util'\nimport { localeNumberString } from '../../../utils/number'\nimport { tooltipColor, tooltipWidth, SmartChartPage, SmartChartPageProps } from '../common'\nimport { fetchStatisticAddressBalanceRank } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { useAdaptPCEllipsis } from '../../../utils/hook'\n\nconst getAddressWithRanking = (statisticAddressBalanceRanks: State.StatisticAddressBalanceRank[], ranking: string) => {\n  const addressBalanceRank = statisticAddressBalanceRanks.find(rank => rank.ranking === ranking)\n  return addressBalanceRank ? addressBalanceRank.address : ''\n}\n\nconst getOption = (\n  statisticAddressBalanceRanks: State.StatisticAddressBalanceRank[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n  getAdaptAddressText: (address: string) => string,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '5%',\n    right: '3%',\n    top: isMobile ? '3%' : '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 60 : 35)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(\n              i18n.t('statistic.address'),\n            )} ${getAdaptAddressText(getAddressWithRanking(statisticAddressBalanceRanks, dataList[0].name))}</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.balance'))} \\\n          ${localeNumberString(dataList[0].data)} ${i18n.t('common.ckb_unit')}</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.rank'))} ${\n              dataList[0].name\n            }</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.rank'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n        data: statisticAddressBalanceRanks.map(data => data.ranking),\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : `${i18n.t('statistic.balance_ranking')} ${i18n.t('statistic.log')}`,\n        type: 'log',\n        logBase: 10,\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${handleAxis(value)}B`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.balance_ranking'),\n        type: 'bar',\n        yAxisIndex: 0,\n        barWidth: 8,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        data: statisticAddressBalanceRanks.map(data => shannonToCkb(data.balance)),\n      },\n    ],\n  }\n}\n\nconst fetchStatisticAddressBalanceRanks = async () => {\n  const resp = await fetchStatisticAddressBalanceRank()\n  return resp.attributes.addressBalanceRanking\n}\n\nconst toCSV = (statisticAddressBalanceRanks: State.StatisticAddressBalanceRank[]) =>\n  statisticAddressBalanceRanks\n    ? statisticAddressBalanceRanks.map(data => [data.ranking, shannonToCkbDecimal(data.balance, 8)])\n    : []\n\nexport const AddressBalanceRankChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const history = useHistory()\n  const [t] = useTranslation()\n\n  const [statisticAddressBalanceRanks, setStatisticAddressBalanceRanks] = useState<State.StatisticAddressBalanceRank[]>(\n    [],\n  )\n  const clickEvent = useCallback(\n    (param: any) => {\n      if (param && param.name && statisticAddressBalanceRanks.length > 0) {\n        const address = getAddressWithRanking(statisticAddressBalanceRanks, param.name)\n        if (address) {\n          history.push(`/address/${address}`)\n        }\n      }\n    },\n    [statisticAddressBalanceRanks, history],\n  )\n\n  const adaptPCEllipsis = useAdaptPCEllipsis(60)\n  const getEChartOption: SmartChartPageProps<State.StatisticAddressBalanceRank>['getEChartOption'] = useCallback(\n    (...args) => getOption(...args, address => adaptPCEllipsis(address, 6)),\n    [adaptPCEllipsis],\n  )\n\n  return (\n    <SmartChartPage\n      title={t('statistic.balance_ranking')}\n      description={t('statistic.balance_ranking_description')}\n      isThumbnail={isThumbnail}\n      chartProps={{ clickEvent: !isThumbnail ? clickEvent : undefined }}\n      fetchData={fetchStatisticAddressBalanceRanks}\n      onFetched={setStatisticAddressBalanceRanks}\n      getEChartOption={getEChartOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.AddressBalanceRank}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default AddressBalanceRankChart\n","import styled from 'styled-components'\n\nexport const ChartDetailPanel = styled.div`\n  margin-bottom: 30px;\n  background: white;\n`\n\nexport const ChartDetailTitle = styled.div`\n  background: white;\n  margin-top: 30px;\n  padding: 10px 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media (max-width: 750px) {\n    margin-top: 20px;\n  }\n\n  .chart__detail__title__panel {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex: 1;\n\n    > span {\n      color: #000000;\n      text-align: center;\n      font-size: 24px;\n      margin-left: 100px;\n\n      @media (max-width: 750px) {\n        font-size: 16px;\n        margin-left: 0px;\n      }\n    }\n\n    > img {\n      width: 18px;\n      height: 18px;\n      margin-left: 10px;\n    }\n  }\n\n  .chart__detail__title__download {\n    width: 100px;\n    padding: 5px 0;\n    border-radius: 2px;\n    border: solid 1px #666666;\n    font-size: 12px;\n    text-align: center;\n    color: #666666;\n    margin-right: 3.6%;\n\n    @media (max-width: 750px) {\n      display: none;\n    }\n  }\n`\n\nexport const LoadingPanel = styled.div`\n  display: flex;\n  width: 100%;\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '200px' : '70vh')};\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ChartNoDataPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '92px' : '184px')};\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '56px' : '112px')};\n  border-radius: 6px;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.12);\n  border: solid 0.5px ${props => props.theme.primary};\n  background-color: #ffffff;\n\n  > img {\n    width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '18.5px' : '37px')};\n    height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '14px' : '28px')};\n  }\n\n  > span {\n    font-size: 12px;\n    font-weight: 500;\n    margin-top: 5px;\n    color: ${props => props.theme.primary};\n  }\n`\n\nexport const ChartNotePanel = styled.div`\n  font-size: 12px;\n  with: 100%;\n  color: rgba(0, 0, 0, 0.6);\n  padding: 6px 3%;\n  text-align: left;\n`\n","import { ComponentProps, CSSProperties, ReactElement, ReactNode, useEffect, useMemo, useRef } from 'react'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/chart/bar'\nimport 'echarts/lib/chart/pie'\nimport 'echarts/lib/chart/map'\nimport 'echarts/lib/chart/scatter'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/markLine'\nimport 'echarts/lib/component/dataZoom'\nimport 'echarts/lib/component/brush'\nimport echarts from 'echarts/lib/echarts'\nimport { Tooltip } from 'antd'\nimport { EChartOption, ECharts } from 'echarts'\nimport { LoadingPanel, ChartNoDataPanel, ChartDetailTitle, ChartDetailPanel, ChartNotePanel } from './styled'\nimport Loading from '../../../components/Loading'\nimport ChartNoDataImage from '../../../assets/chart_no_data.png'\nimport ChartNoDataAggronImage from '../../../assets/chart_no_data_aggron.png'\nimport HelpIcon from '../../../assets/qa_help.png'\nimport { isMainnet } from '../../../utils/chain'\nimport SmallLoading from '../../../components/Loading/SmallLoading'\nimport i18n from '../../../utils/i18n'\nimport Content from '../../../components/Content'\nimport { useChartQueryWithCache, useIsMobile, usePrevious, useWindowResize } from '../../../utils/hook'\nimport { useAppState } from '../../../contexts/providers'\nimport { isDeepEqual } from '../../../utils/util'\n\nconst LoadingComp = ({ isThumbnail }: { isThumbnail?: boolean }) => (isThumbnail ? <SmallLoading /> : <Loading show />)\n\nconst ChartLoading = ({ show, isThumbnail = false }: { show: boolean; isThumbnail?: boolean }) => (\n  <LoadingPanel isThumbnail={isThumbnail}>\n    {show ? (\n      <LoadingComp isThumbnail={isThumbnail} />\n    ) : (\n      <ChartNoDataPanel isThumbnail={isThumbnail}>\n        <img alt=\"no data\" src={isMainnet() ? ChartNoDataImage : ChartNoDataAggronImage} />\n        <span>{i18n.t('statistic.no_data')}</span>\n      </ChartNoDataPanel>\n    )}\n  </LoadingPanel>\n)\n\nconst ReactChartCore = ({\n  option,\n  isThumbnail,\n  clickEvent,\n  notMerge = false,\n  lazyUpdate = false,\n  style,\n  className = '',\n}: {\n  option: EChartOption\n  isThumbnail?: boolean\n  clickEvent?: any\n  notMerge?: boolean\n  lazyUpdate?: boolean\n  style?: CSSProperties\n  className?: string\n}) => {\n  const chartRef = useRef<HTMLDivElement>(null)\n  const chartInstanceRef = useRef<ECharts | null>(null)\n  const prevOption = usePrevious(option)\n  const prevClickEvent = usePrevious(clickEvent)\n\n  useEffect(() => {\n    let chartInstance: ECharts | null = null\n    if (chartRef.current) {\n      if (!chartInstanceRef.current) {\n        const renderedInstance = echarts.getInstanceByDom(chartRef.current)\n        if (renderedInstance) {\n          renderedInstance.dispose()\n        }\n        chartInstanceRef.current = echarts.init(chartRef.current)\n      }\n      chartInstance = chartInstanceRef.current\n      try {\n        if (!isDeepEqual(prevOption, option, ['formatter'])) {\n          chartInstance.setOption(option, { notMerge, lazyUpdate })\n        }\n        if (clickEvent && typeof clickEvent === 'function' && clickEvent !== prevClickEvent) {\n          chartInstance.on('click', clickEvent)\n        }\n      } catch (error) {\n        console.error('error', error)\n        if (chartInstance) {\n          chartInstance.dispose()\n        }\n      }\n    }\n  }, [clickEvent, lazyUpdate, notMerge, option, prevClickEvent, prevOption])\n\n  useWindowResize(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current?.resize()\n    }\n  })\n\n  return <div style={{ height: isThumbnail ? '200px' : '70vh', ...style }} className={className} ref={chartRef} />\n}\n\nconst dataToCsv = (data: any[] | undefined) => {\n  if (!data || data.length === 0) {\n    return undefined\n  }\n  let csv = ''\n  data.forEach(row => {\n    csv += row.join(',')\n    csv += '\\n'\n  })\n  return csv\n}\n\nconst ChartPage = ({\n  title,\n  children,\n  description,\n  data,\n}: {\n  title: string\n  children: ReactNode\n  description?: string\n  data?: (string | number)[][]\n}) => {\n  const csv = dataToCsv(data)\n  const fileName = (title.indexOf(' (') > 0 ? title.substring(0, title.indexOf(' (')) : title)\n    .replace(/&/g, '')\n    .toLowerCase()\n    .replace(/\\s+/g, '-')\n  return (\n    <Content>\n      <ChartDetailTitle className=\"container\">\n        <div className=\"chart__detail__title__panel\">\n          <span>{title}</span>\n          {description && (\n            <Tooltip placement=\"bottom\" title={description}>\n              <img src={HelpIcon} alt=\"chart help\" />\n            </Tooltip>\n          )}\n        </div>\n        {csv && (\n          <a\n            className=\"chart__detail__title__download\"\n            rel=\"noopener noreferrer\"\n            href={`data:text/csv;charset=utf-8,${encodeURI(csv)}`}\n            target=\"_blank\"\n            download={`${fileName}.csv`}\n          >\n            {i18n.t('statistic.download_data')}\n          </a>\n        )}\n      </ChartDetailTitle>\n      <ChartDetailPanel className=\"container\">{children}</ChartDetailPanel>\n    </Content>\n  )\n}\n\nexport interface SmartChartPageProps<T> {\n  title: string\n  description?: string\n  note?: string\n  isThumbnail?: boolean\n  chartProps?: Partial<ComponentProps<typeof ReactChartCore>>\n  fetchData: () => Promise<T[] | Response.Response<Response.Wrapper<T>[]>>\n  onFetched?: (dataList: T[]) => void\n  getEChartOption: (\n    dataList: T[],\n    chartColor: State.App['chartColor'],\n    isMobile: boolean,\n    isThumbnail: boolean,\n  ) => echarts.EChartOption\n  toCSV: (dataList: T[]) => (string | number)[][]\n  cacheKey?: string\n  cacheMode?: 'forever' | 'date' | 'epoch'\n}\n\nexport function SmartChartPage<T>({\n  title,\n  description,\n  note,\n  isThumbnail = false,\n  chartProps,\n  fetchData,\n  onFetched,\n  getEChartOption,\n  toCSV,\n  cacheKey,\n  cacheMode = 'forever',\n}: SmartChartPageProps<T>): ReactElement {\n  const isMobile = useIsMobile()\n  const { app } = useAppState()\n\n  const query = useChartQueryWithCache(fetchData, cacheKey, cacheMode)\n  const dataList = useMemo(() => query.data ?? [], [query.data])\n  useEffect(() => {\n    if (onFetched && query.data) {\n      onFetched(query.data)\n    }\n  }, [onFetched, query.data])\n\n  const option = useMemo(\n    () => getEChartOption(dataList, app.chartColor, isMobile, isThumbnail),\n    [app.chartColor, dataList, getEChartOption, isMobile, isThumbnail],\n  )\n\n  const content = query.isLoading ? (\n    <ChartLoading show isThumbnail={isThumbnail} />\n  ) : (\n    <ReactChartCore option={option} isThumbnail={isThumbnail} {...chartProps} />\n  )\n\n  return isThumbnail ? (\n    content\n  ) : (\n    <ChartPage title={title} description={description} data={toCSV(dataList)}>\n      {content}\n      {note != null && <ChartNotePanel>{note}</ChartNotePanel>}\n    </ChartPage>\n  )\n}\n\nconst tooltipColor = (color: string) =>\n  `<span style=\"display:inline-block;margin-right:8px;margin-left:5px;margin-bottom:2px;border-radius:10px;width:6px;height:6px;background-color:${color}\"></span>`\n\nconst tooltipWidth = (value: string, width: number) =>\n  `<span style=\"width:${width}px;display:inline-block;\">${value}:</span>`\n\nexport type SeriesItem = { seriesName: string; name: string; color: string; dataIndex: number }\n\nexport { ChartLoading, ReactChartCore, ChartPage, tooltipColor, tooltipWidth }\n","import BigNumber from 'bignumber.js'\n\nexport const DATA_ZOOM_CONFIG = [\n  {\n    show: true,\n    realtime: true,\n    start: 0,\n    end: 100,\n    xAxisIndex: [0],\n  },\n  {\n    type: 'inside',\n    realtime: true,\n    start: 0,\n    end: 100,\n    xAxisIndex: [0],\n  },\n]\n\nexport const handleAxis = (value: BigNumber | string | number, decimal?: number, hideZero?: boolean) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  if (bigValue.isNaN() || bigValue.isZero()) return '0'\n  const kv = bigValue.dividedBy(1000)\n  const mv = kv.dividedBy(1000)\n  const gv = mv.dividedBy(1000)\n  const tv = gv.dividedBy(1000)\n  const pv = tv.dividedBy(1000)\n  const ev = pv.dividedBy(1000)\n  const zv = ev.dividedBy(1000)\n  const yv = zv.dividedBy(1000)\n\n  if (yv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? yv.toFixed(decimal) : yv.toFixed()}Y`\n  }\n  if (zv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? zv.toFixed(decimal) : zv.toFixed()}Z`\n  }\n  if (ev.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? ev.toFixed(decimal) : ev.toFixed()}E`\n  }\n  if (pv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? pv.toFixed(decimal) : pv.toFixed()}P`\n  }\n  if (tv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? tv.toFixed(decimal) : tv.toFixed()}T`\n  }\n  if (gv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? gv.toFixed(decimal) : gv.toFixed()}G`\n  }\n  if (mv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? mv.toFixed(decimal) : mv.toFixed()}M`\n  }\n  if (kv.isGreaterThanOrEqualTo(1)) {\n    return `${decimal !== undefined ? kv.toFixed(decimal) : kv.toFixed()}K`\n  }\n  return `${decimal && !hideZero ? bigValue.toFixed(decimal) : bigValue.toFixed()}`\n}\n\nexport const handleLogGroupAxis = (value: BigNumber | string | number, suffix?: string) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  return `[${bigValue.isGreaterThanOrEqualTo(1000) ? handleAxis(bigValue.dividedBy(10), 0) : '0'}, ${handleAxis(\n    value,\n    0,\n  )}${suffix || ''}]`\n}\n\nexport const handleStepGroupAxis = (value: BigNumber | string | number, step?: number, suffix?: string) => {\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  return `[${bigValue.minus(step || 100)}, ${value}${suffix || ''}]`\n}\n\nexport const parseInterval = (max: number, min: number) => {\n  const count = 20\n  const interval = (max - min) / count\n  const { length } = Math.ceil(interval).toString()\n  const factor = 10 ** (length > 2 ? length - 2 : 0)\n  return (Math.ceil(interval / factor) + 1) * factor\n}\n","import BigNumber from 'bignumber.js'\n\nexport const localeNumberString = (value: BigNumber | string | number): string => {\n  if (!value) return '0'\n  const origin = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  const bigValue = origin.abs()\n  if (bigValue.isNaN()) {\n    return '0'\n  }\n  if (bigValue.isLessThan(1) && bigValue.abs().isGreaterThan(0)) {\n    return `${value}`\n  }\n  let text = bigValue.toString(10)\n  const pointIndex = text.indexOf('.')\n  let offset = pointIndex === -1 ? text.length : pointIndex\n  while (offset > 3) {\n    text = text\n      .slice(0, offset - 3)\n      .concat(',')\n      .concat(text.slice(offset - 3))\n    offset -= 3\n  }\n  return origin.isNegative() ? `-${text}` : text\n}\n\nconst MIN_VALUE = new BigNumber(1)\nexport const handleDifficulty = (value: BigNumber | string | number) => {\n  if (!value) return '0'\n  const bigValue = typeof value === 'string' || typeof value === 'number' ? new BigNumber(value) : value\n  const kv = bigValue.dividedBy(1000)\n  const mv = kv.dividedBy(1000)\n  const gv = mv.dividedBy(1000)\n  const tv = gv.dividedBy(1000)\n  const pv = tv.dividedBy(1000)\n  const ev = pv.dividedBy(1000)\n  const zv = ev.dividedBy(1000)\n  const yv = zv.dividedBy(1000)\n\n  if (yv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(yv.toFixed(2))} YH`\n  }\n  if (zv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(zv.toFixed(2))} ZH`\n  }\n  if (ev.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(ev.toFixed(2))} EH`\n  }\n  if (pv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(pv.toFixed(2))} PH`\n  }\n  if (tv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(tv.toFixed(2))} TH`\n  }\n  if (gv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(gv.toFixed(2))} GH`\n  }\n  if (mv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(mv.toFixed(2))} MH`\n  }\n  if (kv.isGreaterThanOrEqualTo(MIN_VALUE)) {\n    return `${localeNumberString(kv.toFixed(2))} KH`\n  }\n  return `${localeNumberString(bigValue.toFixed(2))} H`\n}\n\nexport const handleHashRate = (value: BigNumber | string | number) => {\n  return `${handleDifficulty(value)}/s`\n}\n\nexport const parseUDTAmount = (amount: string, decimal: string) => {\n  try {\n    const decimalInt = parseInt(decimal, 10)\n    const amountBigInt = new BigNumber(amount)\n    const result = amountBigInt.dividedBy(new BigNumber(10).pow(decimalInt))\n    if (decimalInt > 20) {\n      return `${result.toFixed(20)}...`\n    }\n    if (result.toString().length >= 16 || result.lt(new BigNumber(0.000001))) {\n      return localeNumberString(result.toFixed(decimalInt))\n    }\n    return localeNumberString(result.toNumber())\n  } catch (error) {\n    console.error(error)\n    return '0'\n  }\n}\n"],"names":["getAddressWithRanking","statisticAddressBalanceRanks","ranking","addressBalanceRank","find","rank","address","getOption","chartColor","isMobile","isThumbnail","getAdaptAddressText","gridThumbnail","left","right","top","bottom","containLabel","grid","color","colors","tooltip","undefined","trigger","formatter","dataList","widthSpan","value","tooltipWidth","currentLanguage","result","tooltipColor","i18n","name","localeNumberString","data","dataZoom","DATA_ZOOM_CONFIG","xAxis","nameLocation","nameGap","type","boundaryGap","map","yAxis","position","logBase","scale","axisLine","lineStyle","axisLabel","handleAxis","series","yAxisIndex","barWidth","symbol","symbolSize","shannonToCkb","balance","fetchStatisticAddressBalanceRanks","fetchStatisticAddressBalanceRank","resp","attributes","addressBalanceRanking","toCSV","shannonToCkbDecimal","AddressBalanceRankChart","history","useHistory","useTranslation","t","useState","setStatisticAddressBalanceRanks","clickEvent","useCallback","param","length","push","adaptPCEllipsis","useAdaptPCEllipsis","getEChartOption","args","title","description","chartProps","fetchData","onFetched","cacheKey","ChartCachedKeys","cacheMode","ChartDetailPanel","styled","ChartDetailTitle","LoadingPanel","props","ChartNoDataPanel","theme","primary","ChartNotePanel","LoadingComp","SmallLoading","Loading","show","ChartLoading","alt","src","isMainnet","ReactChartCore","option","notMerge","lazyUpdate","style","className","chartRef","useRef","chartInstanceRef","prevOption","usePrevious","prevClickEvent","useEffect","chartInstance","current","renderedInstance","echarts","dispose","isDeepEqual","setOption","on","error","console","useWindowResize","resize","height","ref","ChartPage","children","csv","forEach","row","join","dataToCsv","fileName","indexOf","substring","replace","toLowerCase","Content","placement","HelpIcon","rel","href","encodeURI","target","download","SmartChartPage","note","useIsMobile","app","useAppState","query","useChartQueryWithCache","useMemo","content","isLoading","width","realtime","start","end","xAxisIndex","decimal","hideZero","bigValue","BigNumber","isNaN","isZero","kv","dividedBy","mv","gv","tv","pv","ev","zv","yv","isGreaterThanOrEqualTo","toFixed","handleLogGroupAxis","suffix","origin","abs","isLessThan","isGreaterThan","text","toString","pointIndex","offset","slice","concat","isNegative","MIN_VALUE","handleDifficulty","handleHashRate","parseUDTAmount","amount","decimalInt","parseInt","pow","lt","toNumber"],"sourceRoot":""}