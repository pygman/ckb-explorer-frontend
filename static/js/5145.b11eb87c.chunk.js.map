{"version":3,"file":"static/js/5145.b11eb87c.chunk.js","mappings":"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","sources":["pages/StatisticsChart/common/styled.tsx","pages/StatisticsChart/common/index.tsx","pages/StatisticsChart/mining/MinerAddressDistribution.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const ChartDetailPanel = styled.div`\n  margin-bottom: 30px;\n  background: white;\n`\n\nexport const ChartDetailTitle = styled.div`\n  background: white;\n  margin-top: 30px;\n  padding: 10px 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  @media (max-width: 750px) {\n    margin-top: 20px;\n  }\n\n  .chart__detail__title__panel {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex: 1;\n\n    > span {\n      color: #000000;\n      text-align: center;\n      font-size: 24px;\n      margin-left: 100px;\n\n      @media (max-width: 750px) {\n        font-size: 16px;\n        margin-left: 0px;\n      }\n    }\n\n    > img {\n      width: 18px;\n      height: 18px;\n      margin-left: 10px;\n    }\n  }\n\n  .chart__detail__title__download {\n    width: 100px;\n    padding: 5px 0;\n    border-radius: 2px;\n    border: solid 1px #666666;\n    font-size: 12px;\n    text-align: center;\n    color: #666666;\n    margin-right: 3.6%;\n\n    @media (max-width: 750px) {\n      display: none;\n    }\n  }\n`\n\nexport const LoadingPanel = styled.div`\n  display: flex;\n  width: 100%;\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '200px' : '70vh')};\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ChartNoDataPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '92px' : '184px')};\n  height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '56px' : '112px')};\n  border-radius: 6px;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.12);\n  border: solid 0.5px ${props => props.theme.primary};\n  background-color: #ffffff;\n\n  > img {\n    width: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '18.5px' : '37px')};\n    height: ${(props: { isThumbnail?: boolean }) => (props.isThumbnail ? '14px' : '28px')};\n  }\n\n  > span {\n    font-size: 12px;\n    font-weight: 500;\n    margin-top: 5px;\n    color: ${props => props.theme.primary};\n  }\n`\n\nexport const ChartNotePanel = styled.div`\n  font-size: 12px;\n  with: 100%;\n  color: rgba(0, 0, 0, 0.6);\n  padding: 6px 3%;\n  text-align: left;\n`\n","import { ComponentProps, CSSProperties, ReactElement, ReactNode, useEffect, useMemo, useRef } from 'react'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/chart/bar'\nimport 'echarts/lib/chart/pie'\nimport 'echarts/lib/chart/map'\nimport 'echarts/lib/chart/scatter'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport 'echarts/lib/component/markLine'\nimport 'echarts/lib/component/dataZoom'\nimport 'echarts/lib/component/brush'\nimport echarts from 'echarts/lib/echarts'\nimport { Tooltip } from 'antd'\nimport { EChartOption, ECharts } from 'echarts'\nimport { LoadingPanel, ChartNoDataPanel, ChartDetailTitle, ChartDetailPanel, ChartNotePanel } from './styled'\nimport Loading from '../../../components/Loading'\nimport ChartNoDataImage from '../../../assets/chart_no_data.png'\nimport ChartNoDataAggronImage from '../../../assets/chart_no_data_aggron.png'\nimport HelpIcon from '../../../assets/qa_help.png'\nimport { isMainnet } from '../../../utils/chain'\nimport SmallLoading from '../../../components/Loading/SmallLoading'\nimport i18n from '../../../utils/i18n'\nimport Content from '../../../components/Content'\nimport { useChartQueryWithCache, useIsMobile, usePrevious, useWindowResize } from '../../../utils/hook'\nimport { useAppState } from '../../../contexts/providers'\nimport { isDeepEqual } from '../../../utils/util'\n\nconst LoadingComp = ({ isThumbnail }: { isThumbnail?: boolean }) => (isThumbnail ? <SmallLoading /> : <Loading show />)\n\nconst ChartLoading = ({ show, isThumbnail = false }: { show: boolean; isThumbnail?: boolean }) => (\n  <LoadingPanel isThumbnail={isThumbnail}>\n    {show ? (\n      <LoadingComp isThumbnail={isThumbnail} />\n    ) : (\n      <ChartNoDataPanel isThumbnail={isThumbnail}>\n        <img alt=\"no data\" src={isMainnet() ? ChartNoDataImage : ChartNoDataAggronImage} />\n        <span>{i18n.t('statistic.no_data')}</span>\n      </ChartNoDataPanel>\n    )}\n  </LoadingPanel>\n)\n\nconst ReactChartCore = ({\n  option,\n  isThumbnail,\n  clickEvent,\n  notMerge = false,\n  lazyUpdate = false,\n  style,\n  className = '',\n}: {\n  option: EChartOption\n  isThumbnail?: boolean\n  clickEvent?: any\n  notMerge?: boolean\n  lazyUpdate?: boolean\n  style?: CSSProperties\n  className?: string\n}) => {\n  const chartRef = useRef<HTMLDivElement>(null)\n  const chartInstanceRef = useRef<ECharts | null>(null)\n  const prevOption = usePrevious(option)\n  const prevClickEvent = usePrevious(clickEvent)\n\n  useEffect(() => {\n    let chartInstance: ECharts | null = null\n    if (chartRef.current) {\n      if (!chartInstanceRef.current) {\n        const renderedInstance = echarts.getInstanceByDom(chartRef.current)\n        if (renderedInstance) {\n          renderedInstance.dispose()\n        }\n        chartInstanceRef.current = echarts.init(chartRef.current)\n      }\n      chartInstance = chartInstanceRef.current\n      try {\n        if (!isDeepEqual(prevOption, option, ['formatter'])) {\n          chartInstance.setOption(option, { notMerge, lazyUpdate })\n        }\n        if (clickEvent && typeof clickEvent === 'function' && clickEvent !== prevClickEvent) {\n          chartInstance.on('click', clickEvent)\n        }\n      } catch (error) {\n        console.error('error', error)\n        if (chartInstance) {\n          chartInstance.dispose()\n        }\n      }\n    }\n  }, [clickEvent, lazyUpdate, notMerge, option, prevClickEvent, prevOption])\n\n  useWindowResize(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current?.resize()\n    }\n  })\n\n  return <div style={{ height: isThumbnail ? '200px' : '70vh', ...style }} className={className} ref={chartRef} />\n}\n\nconst dataToCsv = (data: any[] | undefined) => {\n  if (!data || data.length === 0) {\n    return undefined\n  }\n  let csv = ''\n  data.forEach(row => {\n    csv += row.join(',')\n    csv += '\\n'\n  })\n  return csv\n}\n\nconst ChartPage = ({\n  title,\n  children,\n  description,\n  data,\n}: {\n  title: string\n  children: ReactNode\n  description?: string\n  data?: (string | number)[][]\n}) => {\n  const csv = dataToCsv(data)\n  const fileName = (title.indexOf(' (') > 0 ? title.substring(0, title.indexOf(' (')) : title)\n    .replace(/&/g, '')\n    .toLowerCase()\n    .replace(/\\s+/g, '-')\n  return (\n    <Content>\n      <ChartDetailTitle className=\"container\">\n        <div className=\"chart__detail__title__panel\">\n          <span>{title}</span>\n          {description && (\n            <Tooltip placement=\"bottom\" title={description}>\n              <img src={HelpIcon} alt=\"chart help\" />\n            </Tooltip>\n          )}\n        </div>\n        {csv && (\n          <a\n            className=\"chart__detail__title__download\"\n            rel=\"noopener noreferrer\"\n            href={`data:text/csv;charset=utf-8,${encodeURI(csv)}`}\n            target=\"_blank\"\n            download={`${fileName}.csv`}\n          >\n            {i18n.t('statistic.download_data')}\n          </a>\n        )}\n      </ChartDetailTitle>\n      <ChartDetailPanel className=\"container\">{children}</ChartDetailPanel>\n    </Content>\n  )\n}\n\nexport interface SmartChartPageProps<T> {\n  title: string\n  description?: string\n  note?: string\n  isThumbnail?: boolean\n  chartProps?: Partial<ComponentProps<typeof ReactChartCore>>\n  fetchData: () => Promise<T[] | Response.Response<Response.Wrapper<T>[]>>\n  onFetched?: (dataList: T[]) => void\n  getEChartOption: (\n    dataList: T[],\n    chartColor: State.App['chartColor'],\n    isMobile: boolean,\n    isThumbnail: boolean,\n  ) => echarts.EChartOption\n  toCSV: (dataList: T[]) => (string | number)[][]\n  cacheKey?: string\n  cacheMode?: 'forever' | 'date' | 'epoch'\n}\n\nexport function SmartChartPage<T>({\n  title,\n  description,\n  note,\n  isThumbnail = false,\n  chartProps,\n  fetchData,\n  onFetched,\n  getEChartOption,\n  toCSV,\n  cacheKey,\n  cacheMode = 'forever',\n}: SmartChartPageProps<T>): ReactElement {\n  const isMobile = useIsMobile()\n  const { app } = useAppState()\n\n  const query = useChartQueryWithCache(fetchData, cacheKey, cacheMode)\n  const dataList = useMemo(() => query.data ?? [], [query.data])\n  useEffect(() => {\n    if (onFetched && query.data) {\n      onFetched(query.data)\n    }\n  }, [onFetched, query.data])\n\n  const option = useMemo(\n    () => getEChartOption(dataList, app.chartColor, isMobile, isThumbnail),\n    [app.chartColor, dataList, getEChartOption, isMobile, isThumbnail],\n  )\n\n  const content = query.isLoading ? (\n    <ChartLoading show isThumbnail={isThumbnail} />\n  ) : (\n    <ReactChartCore option={option} isThumbnail={isThumbnail} {...chartProps} />\n  )\n\n  return isThumbnail ? (\n    content\n  ) : (\n    <ChartPage title={title} description={description} data={toCSV(dataList)}>\n      {content}\n      {note != null && <ChartNotePanel>{note}</ChartNotePanel>}\n    </ChartPage>\n  )\n}\n\nconst tooltipColor = (color: string) =>\n  `<span style=\"display:inline-block;margin-right:8px;margin-left:5px;margin-bottom:2px;border-radius:10px;width:6px;height:6px;background-color:${color}\"></span>`\n\nconst tooltipWidth = (value: string, width: number) =>\n  `<span style=\"width:${width}px;display:inline-block;\">${value}:</span>`\n\nexport type SeriesItem = { seriesName: string; name: string; color: string; dataIndex: number }\n\nexport { ChartLoading, ReactChartCore, ChartPage, tooltipColor, tooltipWidth }\n","import { useCallback } from 'react'\nimport { useHistory } from 'react-router'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { tooltipColor, tooltipWidth, SmartChartPage, SmartChartPageProps } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticMinerAddressDistribution } from '../../../service/http/fetcher'\nimport { useAdaptMobileEllipsis, useAdaptPCEllipsis, useIsMobile } from '../../../utils/hook'\n\nconst Colors = [\n  '#069ECD',\n  '#69C7D4',\n  '#AACFE9',\n  '#29B97A',\n  '#66CC99',\n  '#228159',\n  '#525860',\n  '#74808E',\n  '#9DA6B0',\n  '#FBB04C',\n]\n\nconst getOption = (\n  statisticMinerAddresses: State.StatisticMinerAddress[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n  getAdaptAddressText: (address: string) => string,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '5%',\n    bottom: '5%',\n    containLabel: true,\n  }\n\n  return {\n    color: [chartColor.colors[0], ...Colors],\n    tooltip: !isThumbnail\n      ? {\n          formatter: (data: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 60 : 65)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(\n              i18n.t('statistic.address'),\n            )} ${getAdaptAddressText(data.data.title)}</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.miner_ratio'))} ${(\n              Number(data.data.value) * 100\n            ).toFixed(1)}%</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    series: [\n      {\n        name: i18n.t('statistic.miner_ratio'),\n        type: 'pie',\n        radius: isMobile || isThumbnail ? '50%' : '75%',\n        center: ['50%', '50%'],\n        itemStyle: {\n          emphasis: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)',\n          },\n        },\n        data: statisticMinerAddresses.map(data => ({\n          name: `${getAdaptAddressText(data.address.toLowerCase())} (${(Number(data.radio) * 100).toFixed(1)}%)`,\n          title: data.address.toLowerCase(),\n          value: data.radio,\n        })),\n      },\n    ],\n  }\n}\n\nconst fetchStatisticMinerAddresses = async () => {\n  const {\n    attributes: { minerAddressDistribution },\n  } = await fetchStatisticMinerAddressDistribution()\n  const blockSum = Object.values(minerAddressDistribution).reduce((sum, val) => sum + Number(val), 0)\n  const statisticMinerAddresses: State.StatisticMinerAddress[] = Object.entries(minerAddressDistribution).map(\n    ([key, val]) => ({\n      address: key,\n      radio: (Number(val) / blockSum).toFixed(3),\n    }),\n  )\n  return statisticMinerAddresses\n}\n\nconst toCSV = (statisticMinerAddresses: State.StatisticMinerAddress[]) =>\n  statisticMinerAddresses ? statisticMinerAddresses.map(data => [data.address, data.radio]) : []\n\nexport const MinerAddressDistributionChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n\n  const history = useHistory()\n  const clickEvent = useCallback(\n    (param: any) => {\n      if (param && param.data.title) {\n        history.push(`/address/${param.data.title}`)\n      }\n    },\n    [history],\n  )\n\n  const isMobile = useIsMobile()\n  const adaptMobileEllipsis = useAdaptMobileEllipsis()\n  const adaptPCEllipsis = useAdaptPCEllipsis(80)\n  const getEChartOption: SmartChartPageProps<State.StatisticMinerAddress>['getEChartOption'] = useCallback(\n    (...args) =>\n      getOption(...args, address => (isMobile ? adaptMobileEllipsis(address, 4) : adaptPCEllipsis(address, 2))),\n    [adaptMobileEllipsis, adaptPCEllipsis, isMobile],\n  )\n\n  return (\n    <SmartChartPage\n      title={t('statistic.miner_addresses_rank')}\n      isThumbnail={isThumbnail}\n      chartProps={{ clickEvent: !isThumbnail ? clickEvent : undefined }}\n      fetchData={fetchStatisticMinerAddresses}\n      getEChartOption={getEChartOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.MinerAddressDistribution}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default MinerAddressDistributionChart\n"],"names":["ChartDetailPanel","styled","ChartDetailTitle","LoadingPanel","props","isThumbnail","ChartNoDataPanel","theme","primary","ChartNotePanel","LoadingComp","SmallLoading","Loading","show","ChartLoading","alt","src","isMainnet","i18n","ReactChartCore","option","clickEvent","notMerge","lazyUpdate","style","className","chartRef","useRef","chartInstanceRef","prevOption","usePrevious","prevClickEvent","useEffect","chartInstance","current","renderedInstance","echarts","dispose","isDeepEqual","setOption","on","error","console","useWindowResize","resize","height","ref","ChartPage","title","children","description","csv","data","length","forEach","row","join","dataToCsv","fileName","indexOf","substring","replace","toLowerCase","Content","placement","HelpIcon","rel","href","encodeURI","target","download","SmartChartPage","note","chartProps","fetchData","onFetched","getEChartOption","toCSV","cacheKey","cacheMode","isMobile","useIsMobile","app","useAppState","query","useChartQueryWithCache","dataList","useMemo","chartColor","content","isLoading","tooltipColor","color","tooltipWidth","value","width","Colors","getOption","statisticMinerAddresses","getAdaptAddressText","gridThumbnail","left","right","top","bottom","containLabel","grid","colors","tooltip","undefined","formatter","widthSpan","currentLanguage","result","Number","toFixed","series","name","type","radius","center","itemStyle","emphasis","shadowBlur","shadowOffsetX","shadowColor","map","address","radio","fetchStatisticMinerAddresses","fetchStatisticMinerAddressDistribution","minerAddressDistribution","attributes","blockSum","Object","values","reduce","sum","val","entries","key","MinerAddressDistributionChart","useTranslation","t","history","useHistory","useCallback","param","push","adaptMobileEllipsis","useAdaptMobileEllipsis","adaptPCEllipsis","useAdaptPCEllipsis","args","ChartCachedKeys"],"sourceRoot":""}