"use strict";(self.webpackChunkckb_explorer_fronted=self.webpackChunkckb_explorer_fronted||[]).push([[8205],{83366:function(e,t,o){o.d(t,{Z:function(){return u}});var s,n,c=o(30168),i=o(15751),r=o(38652),a=i.ZP.div(s||(s=(0,c.Z)(["\n  width: 100%;\n  background: #1c1c1c;\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  position: -webkit-fixed;\n  z-index: 2;\n  color: white;\n  top: var(--navbar-height);\n  bottom: 0px;\n  overflow: hidden;\n"]))),d=o(37255),l=o(47775),p=o(73047),h=o(45123),k=o(80184),g=function(){return(0,k.jsxs)(a,{children:[(0,k.jsx)(d.Z,{}),(0,k.jsx)(h.Z,{}),(0,k.jsx)(p.Z,{}),(0,k.jsx)(l.e,{expanded:!0,setExpanded:function(){}})]})},m=i.ZP.div(n||(n=(0,c.Z)(["\n  width: 100%;\n  overflow-x: hidden;\n  flex: 1;\n  margin-top: var(--navbar-height);\n  background: #ededed;\n"]))),u=function(e){var t=e.children,o=e.style,s=(0,r.mr)().components.mobileMenuVisible;return(0,k.jsx)(m,{style:o,children:s?(0,k.jsx)(g,{}):t})}},38205:function(e,t,o){o.r(t),o.d(t,{default:function(){return w},scripts:function(){return m}});var s=o(29439),n=o(93433),c=o(61562),i=o(83366),r=o(17452),a="styles_title__tMqf4",d="styles_container__PKlek",l="styles_links__A-zEh",p=o(22693),h=o(24861),k=o(80184),g=(0,h.mC)()?p.P:p._,m=new Map([["secp256k1_blake160",{name:"SECP256K1/blake160",description:"SECP256K1/blake160 is the default lock script to verify CKB transaction signature.",rfc:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0024-ckb-genesis-script-list/0024-ckb-genesis-script-list.md#secp256k1blake160",code:"https://github.com/nervosnetwork/ckb-system-scripts/blob/master/c/secp256k1_blake160_sighash_all.c"}],["secp256k1 / multisig / locktime",{name:"SECP256K1/multisig",description:"SECP256K1/multisig is a script which allows a group of users to sign a single transaction.",rfc:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0024-ckb-genesis-script-list/0024-ckb-genesis-script-list.md#secp256k1multisig",code:"https://github.com/nervosnetwork/ckb-system-scripts/blob/master/c/secp256k1_blake160_multisig_all.c"}],["secp256k1 / anyone-can-pay (deprecated)",{name:"Anyone-Can-Pay Lock",description:"anyone_can_pay allows a recipient to provide cell capacity in asset transfer.",rfc:"https://github.com/nervosnetwork/rfcs/blob/30980b378fdaccc6e9d21a1c6b53363364fb4abc/rfcs/0026-anyone-can-pay/0026-anyone-can-pay.md",code:"https://github.com/nervosnetwork/ckb-production-scripts/tree/deac6801a95596d74e2da8f2f1a6727309d36100",deprecated:"https://github.com/nervosnetwork/rfcs/commit/89049fe771aae277ef729269c3920db60693aede"}],["secp256k1 / anyone-can-pay",{name:"Anyone-Can-Pay Lock",description:"anyone_can_pay allows a recipient to provide cell capacity in asset transfer.",rfc:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0026-anyone-can-pay/0026-anyone-can-pay.md",code:"https://github.com/nervosnetwork/ckb-production-scripts/blob/e570c11aff3eca12a47237c21598429088c610d5/c/anyone_can_pay.c"}],["nervos dao",{name:"Nervos DAO",description:"Nervos DAO is a smart contract with which users can interact the same way as any smart contract on CKB.",rfc:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0023-dao-deposit-withdraw/0023-dao-deposit-withdraw.md",code:"https://github.com/nervosnetwork/ckb-system-scripts/blob/master/c/dao.c"}],["sudt",{name:"Simple UDT",description:"Simple UDT provides a way for dapp developers to issue custom tokens on Nervos CKB.",rfc:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0025-simple-udt/0025-simple-udt.md",code:"https://github.com/nervosnetwork/ckb-production-scripts/blob/e570c11aff3eca12a47237c21598429088c610d5/c/simple_udt.c"}],["unipass v3",{name:"Unipass",description:"UniPass Wallet is a\xa0smart contract wallet\xa0solution that supports\xa0on-chain Email social recovery.",website:"https://www.unipass.id/"}],["cota",{name:"CoTA",description:"A Compact Token Aggregator Standard for Extremely Low Cost NFTs and FTs",website:"https://www.cotadev.io/"}],["cota_registry",{name:"CoTA Registry",description:"A Compact Token Aggregator Standard for Extremely Low Cost NFTs and FTs",website:"https://www.cotadev.io/"}],["pwlock-k1-acpl",{name:"PW Lock",description:"Forked from CKB's system scripts, and currently supports signature generated by personalSign and signTypedData from ethereum wallets.",code:"https://github.com/lay2dev/pw-lock/"}],["godwoken_custodian_lock",{name:"godwoken_custodian_lock",description:"Rollup uses the custodian lock to hold the deposited assets.",code:"https://github.com/godwokenrises/godwoken/tree/develop/gwos/contracts/custodian-lock",website:"https://github.com/godwokenrises/godwoken/tree/develop/gwos#custodian-lock"}],["godwoken_deposit_lock",{name:"godwoken_deposit_lock",description:"A layer1 user can join the Rollup by creating a deposit cell.",code:"https://github.com/godwokenrises/godwoken/tree/develop/gwos/contracts/deposit-lock",website:"https://github.com/godwokenrises/godwoken/tree/develop/gwos#deposit-lock"}],["godwoken_withdrawal_lock",{name:"godwoken_withdrawal_lock",description:"Withdrawal cells are generated in the RollupSubmitBlock action according to the block.withdrawals field.",code:"https://github.com/godwokenrises/godwoken/tree/develop/gwos/contracts/withdrawal-lock",website:"https://github.com/godwokenrises/godwoken/tree/develop/gwos#withdrawal-lock"}],["godwoken_challenge_lock",{name:"godwoken_challenge_lock",description:"When a Godwoken node found that an invalid state exists in the Rollup, the node can send the RollupEnterChallenge action to the Rollup cell and generate a challenging cell.",code:"https://github.com/godwokenrises/godwoken/tree/develop/gwos/contracts/challenge-lock",website:"https://github.com/godwokenrises/godwoken/tree/develop/gwos#challenge-lock"}],["godwoken_stake_lock",{name:"godwoken_stake_lock",description:"A block producer is required to provide a stake cell to perform the RollupSubmitBlock action.",code:"https://github.com/godwokenrises/godwoken/tree/develop/gwos/contracts/stake-lock",website:"https://github.com/godwokenrises/godwoken/tree/develop/gwos#stake-lock"}],["omni_lock v1",{name:"omni_lock v1",description:"Omnilock is a lock script designed for interoperability. It comes with built-in support for verification of transaction signing methods used in Bitcoin, Ethereum, EOS, and Dogecoin. Omnilock is also extensible, so more verification algorithms can be added in future.",rfc:"https://github.com/nervosnetwork/rfcs/tree/master/rfcs/0042-omnilock"}],["omni_lock v2",{name:"omni_lock v2",description:"Omnilock is a lock script designed for interoperability. It comes with built-in support for verification of transaction signing methods used in Bitcoin, Ethereum, EOS, and Dogecoin. Omnilock is also extensible, so more verification algorithms can be added in future.",rfc:"https://github.com/nervosnetwork/rfcs/tree/master/rfcs/0042-omnilock",code:"https://github.com/nervosnetwork/ckb-production-scripts/blob/master/c/omni_lock.c"}],["godwoken_state_validator",{name:"godwoken_state_validator",description:"State validator is the major script to verify the on-chain Rollup cell. Rollup cell is an identity cell on CKB, it stores the structure GlobalState which represents the layer-2 state.",code:"https://github.com/godwokenrises/godwoken/tree/develop/gwos/contracts/state-validator",website:"https://github.com/godwokenrises/godwoken/tree/develop/gwos#state-validator"}],["godwoken_eth_account_lock",{name:"godwoken_eth_account_lock",description:"A layer-2 lock script, ETH account lock is a script that verifies the layer-2 account signature.",code:"https://github.com/godwokenrises/godwoken/tree/develop/gwos/contracts/eth-account-lock",website:"https://github.com/godwokenrises/godwoken/tree/develop/gwos#eth-account-lock"}]]),u=["rfc","code","deprecated","website"],w=function(){var e=(0,c.TH)(),t=decodeURIComponent(e.hash.slice(1));return(0,k.jsxs)(i.Z,{children:[(0,k.jsx)("div",{className:a,children:r.ZP.t("script_list.title")}),(0,k.jsx)("div",{className:d,children:(0,n.Z)(m).map((function(e){var o=(0,s.Z)(e,2),n=o[0],c=o[1],i=g.find((function(e){return e.tag===n}));return(0,k.jsxs)("details",{id:n,open:n===t,children:[(0,k.jsxs)("summary",{"data-deprecated":!!c.deprecated,title:c.deprecated?"Deprecated":void 0,children:[(0,k.jsx)("b",{children:"".concat(c.name,":")}),c.description]}),(0,k.jsxs)("div",{children:[(0,k.jsx)("h3",{children:"".concat(r.ZP.t("script_list.links"),":")}),(0,k.jsxs)("div",{className:l,children:[u.map((function(e){return c[e]?(0,k.jsx)("a",{href:c[e],target:"_blank",rel:"noopener noreferrer",children:r.ZP.t("script_list.link.".concat(e))},e):null})),i?(0,k.jsx)("a",{href:"/script/".concat(i.codeHashes[0],"/").concat(i.hashType),target:"_blank",rel:"noopener noreferrer",children:r.ZP.t("script_list.link.detail")}):null]}),i?(0,k.jsxs)(k.Fragment,{children:[(0,k.jsx)("h3",{children:"".concat(r.ZP.t("script_list.on_chain_data"),":")}),i.codeHashes.map((function(e,t){var o,s;return(0,k.jsx)("pre",{children:'{\n  "code_hash": "'.concat(e,'",\n  "hash_type": "').concat(i.hashType,'",\n  "out_point": {\n    "tx_hash": "').concat(null===(o=i.txHashes[t])||void 0===o?void 0:o.split("-")[0],'",\n    "index": "0x').concat((+(null===(s=i.txHashes[t])||void 0===s?void 0:s.split("-")[1])).toString(16),'"\n  },\n  "dep_type": "').concat(i.depType,'"\n}')},e)}))]}):null]})]},n)}))})]})}}}]);
//# sourceMappingURL=8205.8696edc7.chunk.js.map