{"version":3,"file":"static/js/1993.f893e23a.chunk.js","mappings":"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","sources":["pages/StatisticsChart/activities/AddressBalanceRank.tsx","pages/StatisticsChart/activities/AddressCount.tsx","pages/StatisticsChart/activities/CellCount.tsx","pages/StatisticsChart/activities/TransactionCount.tsx","pages/StatisticsChart/activities/TxFeeHistory.tsx","pages/StatisticsChart/block/AverageBlockTime.tsx","pages/StatisticsChart/block/BlockTimeDistribution.tsx","pages/StatisticsChart/block/EpochTimeDistribution.tsx","pages/StatisticsChart/styled.tsx","pages/StatisticsChart/index.tsx","pages/StatisticsChart/mining/Difficulty.tsx","pages/StatisticsChart/mining/DifficultyHashRate.tsx","pages/StatisticsChart/mining/DifficultyUncleRateEpoch.tsx","pages/StatisticsChart/mining/HashRate.tsx","pages/StatisticsChart/mining/MinerAddressDistribution.tsx","pages/StatisticsChart/mining/MinerVersionDistribution.tsx","pages/StatisticsChart/mining/UncleRate.tsx","pages/StatisticsChart/monetary/AnnualPercentageCompensation.tsx","pages/StatisticsChart/monetary/InflationRate.tsx","pages/StatisticsChart/monetary/Liquidity.tsx","pages/StatisticsChart/monetary/SecondaryIssuance.tsx","pages/StatisticsChart/monetary/TotalSupply.tsx","pages/StatisticsChart/nervosDao/CirculationRatio.tsx","pages/StatisticsChart/nervosDao/NewDaoDeposit.tsx","pages/StatisticsChart/nervosDao/TotalDaoDeposit.tsx","../node_modules/default-passive-events/src/index.js","../node_modules/default-passive-events/src/utils.js"],"sourcesContent":["import { useCallback, useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { shannonToCkb, shannonToCkbDecimal } from '../../../utils/util'\nimport { localeNumberString } from '../../../utils/number'\nimport { tooltipColor, tooltipWidth, SmartChartPage, SmartChartPageProps } from '../common'\nimport { fetchStatisticAddressBalanceRank } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { useAdaptPCEllipsis } from '../../../utils/hook'\n\nconst getAddressWithRanking = (statisticAddressBalanceRanks: State.StatisticAddressBalanceRank[], ranking: string) => {\n  const addressBalanceRank = statisticAddressBalanceRanks.find(rank => rank.ranking === ranking)\n  return addressBalanceRank ? addressBalanceRank.address : ''\n}\n\nconst getOption = (\n  statisticAddressBalanceRanks: State.StatisticAddressBalanceRank[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n  getAdaptAddressText: (address: string) => string,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '5%',\n    right: '3%',\n    top: isMobile ? '3%' : '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 60 : 35)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(\n              i18n.t('statistic.address'),\n            )} ${getAdaptAddressText(getAddressWithRanking(statisticAddressBalanceRanks, dataList[0].name))}</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.balance'))} \\\n          ${localeNumberString(dataList[0].data)} ${i18n.t('common.ckb_unit')}</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.rank'))} ${\n              dataList[0].name\n            }</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.rank'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n        data: statisticAddressBalanceRanks.map(data => data.ranking),\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : `${i18n.t('statistic.balance_ranking')} ${i18n.t('statistic.log')}`,\n        type: 'log',\n        logBase: 10,\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${handleAxis(value)}B`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.balance_ranking'),\n        type: 'bar',\n        yAxisIndex: 0,\n        barWidth: 8,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        data: statisticAddressBalanceRanks.map(data => shannonToCkb(data.balance)),\n      },\n    ],\n  }\n}\n\nconst fetchStatisticAddressBalanceRanks = async () => {\n  const resp = await fetchStatisticAddressBalanceRank()\n  return resp.attributes.addressBalanceRanking\n}\n\nconst toCSV = (statisticAddressBalanceRanks: State.StatisticAddressBalanceRank[]) =>\n  statisticAddressBalanceRanks\n    ? statisticAddressBalanceRanks.map(data => [data.ranking, shannonToCkbDecimal(data.balance, 8)])\n    : []\n\nexport const AddressBalanceRankChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const history = useHistory()\n  const [t] = useTranslation()\n\n  const [statisticAddressBalanceRanks, setStatisticAddressBalanceRanks] = useState<State.StatisticAddressBalanceRank[]>(\n    [],\n  )\n  const clickEvent = useCallback(\n    (param: any) => {\n      if (param && param.name && statisticAddressBalanceRanks.length > 0) {\n        const address = getAddressWithRanking(statisticAddressBalanceRanks, param.name)\n        if (address) {\n          history.push(`/address/${address}`)\n        }\n      }\n    },\n    [statisticAddressBalanceRanks, history],\n  )\n\n  const adaptPCEllipsis = useAdaptPCEllipsis(60)\n  const getEChartOption: SmartChartPageProps<State.StatisticAddressBalanceRank>['getEChartOption'] = useCallback(\n    (...args) => getOption(...args, address => adaptPCEllipsis(address, 6)),\n    [adaptPCEllipsis],\n  )\n\n  return (\n    <SmartChartPage\n      title={t('statistic.balance_ranking')}\n      description={t('statistic.balance_ranking_description')}\n      isThumbnail={isThumbnail}\n      chartProps={{ clickEvent: !isThumbnail ? clickEvent : undefined }}\n      fetchData={fetchStatisticAddressBalanceRanks}\n      onFetched={setStatisticAddressBalanceRanks}\n      getEChartOption={getEChartOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.AddressBalanceRank}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default AddressBalanceRankChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { fetchStatisticAddressCount } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\n\nconst getOption = (\n  statisticAddressCounts: State.StatisticAddressCount[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: isMobile ? '3%' : '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 155 : 110)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              dataList[0].data[0]\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}\\\n          ${widthSpan(i18n.t('statistic.address_count'))} ${handleAxis(dataList[0].data[1])}</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n        splitLine: {\n          show: false,\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.address_count'),\n        type: 'value',\n        scale: true,\n        nameTextStyle: {\n          align: 'left',\n        },\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.address_count'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n      },\n    ],\n    dataset: {\n      source: statisticAddressCounts.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(data.addressesCount).toNumber(),\n      ]),\n    },\n  }\n}\n\nconst toCSV = (statisticAddressCounts?: State.StatisticAddressCount[]) =>\n  statisticAddressCounts ? statisticAddressCounts.map(data => [data.createdAtUnixtimestamp, data.addressesCount]) : []\n\nexport const AddressCountChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.address_count')}\n      description={t('statistic.address_count_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticAddressCount}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.AddressCount}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default AddressCountChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticCellCount } from '../../../service/http/fetcher'\n\nconst widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 60 : 80)\n\nconst parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: [string, string, string] }): string => {\n  if (seriesName === i18n.t('statistic.live_cell')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.live_cell'))} ${handleAxis(data[1], 2)}</div>`\n  }\n  if (seriesName === i18n.t('statistic.all_cells')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.all_cells'))} ${handleAxis(data[2], 2)}</div>`\n  }\n  return ''\n}\n\nconst getOption = (\n  statisticCellCounts: State.StatisticCellCount[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '4%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: [string, string, string] }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              list[0].data[0]\n            }</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: !isThumbnail\n      ? {\n          data: [\n            {\n              name: i18n.t('statistic.live_cell'),\n            },\n            {\n              name: i18n.t('statistic.all_cells'),\n            },\n          ],\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.live_cell'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n      {\n        position: 'right',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.all_cells'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[1],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.live_cell'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'live',\n        },\n      },\n      {\n        name: i18n.t('statistic.all_cells'),\n        type: 'line',\n        yAxisIndex: 1,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'all',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticCellCounts.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(data.liveCellsCount).toNumber(),\n        new BigNumber(data.allCellsCount).toNumber(),\n      ]),\n      dimensions: ['timestamp', 'live', 'all'],\n    },\n  }\n}\n\nconst toCSV = (statisticCellCounts: State.StatisticCellCount[]) =>\n  statisticCellCounts\n    ? statisticCellCounts.map(data => [data.createdAtUnixtimestamp, data.liveCellsCount, data.allCellsCount])\n    : []\n\nexport const CellCountChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.cell_count')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticCellCount}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.CellCount}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default CellCountChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticTransactionCount } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticTransactionCounts: State.StatisticTransactionCount[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: isMobile ? '3%' : '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 120 : 65)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              dataList[0].data[0]\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(\n              i18n.t('statistic.transaction_count'),\n            )} ${handleAxis(dataList[0].data[1])}</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.transaction_count'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.transaction_count'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n      },\n    ],\n    dataset: {\n      source: statisticTransactionCounts.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(data.transactionsCount).toNumber(),\n      ]),\n    },\n  }\n}\n\nconst toCSV = (statisticTransactionCounts: State.StatisticTransactionCount[]) =>\n  statisticTransactionCounts\n    ? statisticTransactionCounts.map(data => [data.createdAtUnixtimestamp, data.transactionsCount])\n    : []\n\nexport const TransactionCountChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.transaction_count')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticTransactionCount}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.TransactionCount}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default TransactionCountChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { shannonToCkbDecimal } from '../../../utils/util'\nimport { isMainnet } from '../../../utils/chain'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticTxFeeHistory } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticTxFeeHistories: State.StatisticTransactionFee[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '6%',\n    right: '3%',\n    top: isMobile ? '3%' : '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 145 : 90)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              dataList[0].data[0]\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.tx_fee'))} ${handleAxis(\n              dataList[0].data[1],\n            )}</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n        splitLine: {\n          show: false,\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : `${i18n.t('statistic.tx_fee')} ${i18n.t('statistic.log')}`,\n        type: isMainnet() ? 'log' : 'value',\n        logBase: 10,\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.tx_fee'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n      },\n    ],\n    dataset: {\n      source: statisticTxFeeHistories.map(d => [\n        parseDateNoTime(d.createdAtUnixtimestamp),\n        shannonToCkbDecimal(d.totalTxFee, 4),\n      ]),\n    },\n  }\n}\n\nconst toCSV = (statisticTxFeeHistories: State.StatisticTransactionFee[]) =>\n  statisticTxFeeHistories\n    ? statisticTxFeeHistories.map(data => [data.createdAtUnixtimestamp, shannonToCkbDecimal(data.totalTxFee, 8)])\n    : []\n\nexport const TxFeeHistoryChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.tx_fee_history')}\n      description={t('statistic.tx_fee_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticTxFeeHistory}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.TransactionFee}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default TxFeeHistoryChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { parseDateNoTime, parseSimpleDate, parseSimpleDateNoSecond } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { localeNumberString } from '../../../utils/number'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { fetchStatisticAverageBlockTimes } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\n\nconst getOption = (\n  statisticAverageBlockTimes: State.StatisticAverageBlockTime[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '3%',\n    right: '3%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '2%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n\n  const maxAndMinAxis = (statisticAverageBlockTimes: State.StatisticAverageBlockTime[]) => {\n    const array = statisticAverageBlockTimes.flatMap(data => parseFloat(data.avgBlockTimeDaily))\n    return {\n      max: Math.ceil(Math.max(...array) / 1000),\n      min: Math.floor(Math.min(...array) / 1000),\n    }\n  }\n\n  const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 180 : 100)\n\n  const parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: string }): string => {\n    if (seriesName === i18n.t('statistic.daily_moving_average')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.daily_moving_average'))} ${localeNumberString(\n        data[1],\n      )}</div>`\n    }\n    if (seriesName === i18n.t('statistic.weekly_moving_average')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.weekly_moving_average'))} ${localeNumberString(\n        data[2],\n      )}</div>`\n    }\n    return ''\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: string }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(\n              i18n.t('statistic.date'),\n            )} ${parseSimpleDateNoSecond(new Date(list[0].data[0]), '/', false)}</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: !isThumbnail\n      ? {\n          data: [\n            {\n              name: i18n.t('statistic.daily_moving_average'),\n            },\n            {\n              name: i18n.t('statistic.weekly_moving_average'),\n            },\n          ],\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category', // TODO: use type: time\n        boundaryGap: false,\n        splitLine: {\n          show: false,\n        },\n        axisLabel: {\n          formatter: (value: string) => parseDateNoTime(new Date(value)),\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.daily_moving_average'),\n        type: 'value',\n        scale: true,\n        nameTextStyle: {\n          align: 'left',\n        },\n        max: () => maxAndMinAxis(statisticAverageBlockTimes).max,\n        min: () => maxAndMinAxis(statisticAverageBlockTimes).min,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => localeNumberString(value),\n        },\n      },\n      {\n        position: 'right',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.weekly_moving_average'),\n        type: 'value',\n        scale: true,\n        nameTextStyle: {\n          align: 'right',\n        },\n        max: () => maxAndMinAxis(statisticAverageBlockTimes).max,\n        min: () => maxAndMinAxis(statisticAverageBlockTimes).min,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[1],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => localeNumberString(value),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.daily_moving_average'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'daily',\n        },\n      },\n      {\n        name: i18n.t('statistic.weekly_moving_average'),\n        type: 'line',\n        yAxisIndex: 1,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'weekly',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticAverageBlockTimes.map(data => [\n        parseSimpleDate(data.timestamp * 1000),\n        (Number(data.avgBlockTimeDaily) / 1000).toFixed(2),\n        (Number(data.avgBlockTimeWeekly) / 1000).toFixed(2),\n      ]),\n      dimensions: ['timestamp', 'daily', 'weekly'],\n    },\n  }\n}\n\nconst toCSV = (statisticAverageBlockTimes: State.StatisticAverageBlockTime[]) =>\n  statisticAverageBlockTimes\n    ? statisticAverageBlockTimes.map(data => [data.timestamp, data.avgBlockTimeDaily, data.avgBlockTimeWeekly])\n    : []\n\nexport const AverageBlockTimeChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.average_block_time')}\n      description={t('statistic.average_block_time_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticAverageBlockTimes}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.AverageBlockTime}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default AverageBlockTimeChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticBlockTimeDistribution } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticBlockTimeDistributions: State.StatisticBlockTimeDistribution[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '5%',\n    right: '3%',\n    top: isMobile ? '3%' : '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 80 : 80)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.time'))} ${\n              dataList[0].name\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.block_count'))} ${\n              dataList[0].data\n            }%</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.time'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        data: statisticBlockTimeDistributions.map(data => data.time),\n        axisLabel: {\n          interval: 49,\n          formatter: (value: string) => Number(value).toFixed(0),\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.block_count'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${value}%`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.block_count'),\n        type: 'line',\n        yAxisIndex: 0,\n        areaStyle: {\n          color: chartColor.areaColor,\n        },\n        barWidth: isMobile || isThumbnail ? 10 : 20,\n        data: statisticBlockTimeDistributions.map(data => (Number(data.ratio) * 100).toFixed(3)),\n      },\n    ],\n  }\n}\n\nconst fetchStatisticBlockTimeDistributions = async () => {\n  const {\n    attributes: { blockTimeDistribution },\n  } = await fetchStatisticBlockTimeDistribution()\n  const sumBlocks = blockTimeDistribution\n    .flatMap(data => Number(data[1]))\n    .reduce((previous, current) => previous + current)\n  const statisticBlockTimeDistributions = [\n    {\n      time: '0',\n      ratio: '0',\n    },\n  ].concat(\n    blockTimeDistribution.map(data => {\n      const [time, blocks] = data\n      return {\n        time,\n        ratio: (Number(blocks) / sumBlocks).toFixed(5),\n      }\n    }),\n  )\n  return statisticBlockTimeDistributions\n}\n\nconst toCSV = (statisticBlockTimeDistributions: State.StatisticBlockTimeDistribution[]) =>\n  statisticBlockTimeDistributions\n    ? statisticBlockTimeDistributions.map(data => [data.time, Number(data.ratio).toFixed(4)])\n    : []\n\nexport const BlockTimeDistributionChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.block_time_distribution_more')}\n      description={t('statistic.block_time_distribution_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticBlockTimeDistributions}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.BlockTimeDistribution}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default BlockTimeDistributionChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { localeNumberString } from '../../../utils/number'\nimport { parseHourFromMinute } from '../../../utils/date'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { fetchStatisticEpochTimeDistribution } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\n\nconst getOption = (\n  statisticEpochTimeDistributions: State.StatisticEpochTimeDistribution[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '5%',\n    right: '3%',\n    top: isMobile ? '3%' : '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 80 : 80)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(\n              i18n.t('statistic.time_hour'),\n            )} ${parseHourFromMinute(dataList[0].name)}</div>`\n            result += `\\\n            <div>${tooltipColor(chartColor.colors[0])}\\\n            ${widthSpan(i18n.t('statistic.epochs'))} \\\n            ${localeNumberString(dataList[0].data)}</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.time_hour'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: true,\n        data: statisticEpochTimeDistributions.map(data => data.time),\n        axisLabel: {\n          formatter: (value: string) => parseHourFromMinute(value),\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.epochs'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => localeNumberString(value),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.epochs'),\n        type: 'bar',\n        yAxisIndex: 0,\n        areaStyle: {\n          color: chartColor.areaColor,\n        },\n        barWidth: isMobile || isThumbnail ? 2 : 5,\n        data: statisticEpochTimeDistributions.map(data => data.epoch),\n      },\n    ],\n  }\n}\n\nconst fetchStatisticEpochTimeDistributions = async () => {\n  const {\n    attributes: { epochTimeDistribution },\n  } = await fetchStatisticEpochTimeDistribution()\n  const statisticEpochTimeDistributions: State.StatisticEpochTimeDistribution[] = epochTimeDistribution.map(data => {\n    const [time, epoch] = data\n    return {\n      time,\n      epoch,\n    }\n  })\n  return statisticEpochTimeDistributions\n}\n\nconst toCSV = (statisticEpochTimeDistributions: State.StatisticEpochTimeDistribution[]) =>\n  statisticEpochTimeDistributions\n    ? statisticEpochTimeDistributions.map(data => [parseHourFromMinute(data.time), data.epoch])\n    : []\n\nexport const EpochTimeDistributionChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.epoch_time_distribution_more')}\n      description={t('statistic.epoch_time_distribution_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticEpochTimeDistributions}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.EpochTimeDistribution}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default EpochTimeDistributionChart\n","import styled from 'styled-components'\n\nexport const ChartsContent = styled.div`\n  margin-top: 40px;\n\n  @media (max-width: 750px) {\n    margin-top: 20px;\n  }\n`\n\nexport const ChartsTitle = styled.div`\n  font-size: 24px;\n  font-weight: 600;\n  color: #000000;\n`\n\nexport const ChartsPanel = styled.div`\n  margin-top: 20px;\n  padding: 20px;\n  background: white;\n  border-radius: 6px;\n  box-shadow: 2px 2px 6px 0 rgba(0, 0, 0, 0.12);\n\n  @media (max-width: 750px) {\n    padding: 20px 10px;\n  }\n\n  .charts__category__title {\n    font-size: 20px;\n    font-weight: 600;\n    color: #000000;\n    margin-left: 10px;\n  }\n\n  .charts__category__panel {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    margin: 0px 3px;\n  }\n`\n\nexport const ChartCardPanel = styled.div`\n  width: 280px;\n  height: 220px;\n  background: white;\n  margin: 20px 7px;\n  cursor: pointer;\n\n  @media (max-width: 750px) {\n    width: 100%;\n  }\n\n  .echarts-for-react {\n    canvas {\n      cursor: pointer;\n    }\n  }\n\n  .chart__card__title__penal {\n    display: flex;\n    align-items: center;\n    padding-left: 12px;\n    background: #f8f9fa;\n    border-radius: 6px 6px 0 0;\n    border: 1px solid #e2e2e2;\n    border-width: 1px 1px 0 1px;\n    height: 40px;\n\n    > img {\n      width: 16px;\n      height: 16px;\n      margin-left: 10px;\n    }\n  }\n\n  .chart__card_title {\n    height: 40px;\n    line-height: 40px;\n    color: #000000;\n    font-size: 14px;\n    font-weight: 600;\n  }\n\n  .chart__card_body {\n    border-radius: 0 0 6px 6px;\n    box-shadow: 2px 2px 10px 0 rgb(43, 43, 43, 0.05);\n    border: 1px solid #e2e2e2;\n  }\n`\n","import { ReactNode } from 'react'\nimport { Link } from 'react-router-dom'\nimport 'default-passive-events'\nimport { Tooltip } from 'antd'\nimport Content from '../../components/Content'\nimport i18n from '../../utils/i18n'\nimport HelpIcon from '../../assets/qa_help.png'\nimport { DifficultyHashRateChart } from './mining/DifficultyHashRate'\nimport { DifficultyUncleRateEpochChart } from './mining/DifficultyUncleRateEpoch'\nimport { TransactionCountChart } from './activities/TransactionCount'\nimport { AddressCountChart } from './activities/AddressCount'\nimport { CellCountChart } from './activities/CellCount'\nimport { TotalDaoDepositChart } from './nervosDao/TotalDaoDeposit'\nimport { ChartsPanel, ChartCardPanel, ChartsTitle, ChartsContent } from './styled'\nimport { AddressBalanceRankChart } from './activities/AddressBalanceRank'\nimport { DifficultyChart } from './mining/Difficulty'\nimport { HashRateChart } from './mining/HashRate'\nimport { UncleRateChart } from './mining/UncleRate'\nimport { BalanceDistributionChart } from './activities/BalanceDistribution'\nimport { TxFeeHistoryChart } from './activities/TxFeeHistory'\nimport { BlockTimeDistributionChart } from './block/BlockTimeDistribution'\nimport { EpochTimeDistributionChart } from './block/EpochTimeDistribution'\nimport { NewDaoDepositChart } from './nervosDao/NewDaoDeposit'\nimport { CirculationRatioChart } from './nervosDao/CirculationRatio'\nimport { AverageBlockTimeChart } from './block/AverageBlockTime'\nimport { TotalSupplyChart } from './monetary/TotalSupply'\nimport { AnnualPercentageCompensationChart } from './monetary/AnnualPercentageCompensation'\nimport { SecondaryIssuanceChart } from './monetary/SecondaryIssuance'\nimport { InflationRateChart } from './monetary/InflationRate'\nimport { LiquidityChart } from './monetary/Liquidity'\nimport { MinerAddressDistributionChart } from './mining/MinerAddressDistribution'\nimport { MinerVersionDistributionChart } from './mining/MinerVersionDistribution'\nimport { useIsMobile } from '../../utils/hook'\n\ninterface ChartData {\n  title: string\n  chart: ReactNode\n  path: string\n  description?: string\n}\n\ninterface ChartCategory {\n  category: string\n  charts: ChartData[]\n}\n\nconst ChartTitle = ({ chartData }: { chartData: ChartData }) => (\n  <div className=\"chart__card__title__penal\">\n    <div className=\"chart__card_title\">{chartData.title}</div>\n    {chartData.description && (\n      <Tooltip placement=\"bottom\" title={chartData.description}>\n        <img src={HelpIcon} alt=\"chart help\" />\n      </Tooltip>\n    )}\n  </div>\n)\n\nconst ChartCard = ({ chartData }: { chartData: ChartData }) => {\n  const isMobile = useIsMobile()\n  return (\n    <ChartCardPanel>\n      {isMobile && <ChartTitle chartData={chartData} />}\n      <Link to={chartData.path}>\n        {!isMobile && <ChartTitle chartData={chartData} />}\n        <div className=\"chart__card_body\">{chartData.chart}</div>\n      </Link>\n    </ChartCardPanel>\n  )\n}\n\nconst chartsData = (): ChartCategory[] => [\n  {\n    category: i18n.t('statistic.category_block'),\n    charts: [\n      {\n        title: `${i18n.t('statistic.block_time_distribution')}`,\n        chart: <BlockTimeDistributionChart isThumbnail />,\n        path: '/charts/block-time-distribution',\n        description: i18n.t('statistic.block_time_distribution_description'),\n      },\n      {\n        title: `${i18n.t('statistic.epoch_time_distribution')}`,\n        chart: <EpochTimeDistributionChart isThumbnail />,\n        path: '/charts/epoch-time-distribution',\n        description: i18n.t('statistic.epoch_time_distribution_description'),\n      },\n      {\n        title: `${i18n.t('statistic.average_block_time')}`,\n        chart: <AverageBlockTimeChart isThumbnail />,\n        path: '/charts/average-block-time',\n        description: i18n.t('statistic.average_block_time_description'),\n      },\n    ],\n  },\n  {\n    category: i18n.t('statistic.category_mining'),\n    charts: [\n      {\n        title: `${i18n.t('block.difficulty')} & ${i18n.t('block.hash_rate')} & ${i18n.t('block.uncle_rate')}`,\n        chart: <DifficultyHashRateChart isThumbnail />,\n        path: '/charts/difficulty-hash-rate',\n      },\n      {\n        title: `${i18n.t('block.epoch_time')} & ${i18n.t('block.epoch_length')}`,\n        chart: <DifficultyUncleRateEpochChart isThumbnail />,\n        path: '/charts/epoch-time-length',\n      },\n      {\n        title: `${i18n.t('block.difficulty')}`,\n        chart: <DifficultyChart isThumbnail />,\n        path: '/charts/difficulty',\n      },\n      {\n        title: `${i18n.t('block.hash_rate')}`,\n        chart: <HashRateChart isThumbnail />,\n        path: '/charts/hash-rate',\n      },\n      {\n        title: `${i18n.t('block.uncle_rate')}`,\n        chart: <UncleRateChart isThumbnail />,\n        path: '/charts/uncle-rate',\n        description: i18n.t('statistic.uncle_rate_description'),\n      },\n      {\n        title: `${i18n.t('statistic.miner_addresses_rank')}`,\n        chart: <MinerAddressDistributionChart isThumbnail />,\n        path: '/charts/miner-address-distribution',\n      },\n      {\n        title: `${i18n.t('statistic.miner_version_distribution')}`,\n        chart: <MinerVersionDistributionChart isThumbnail />,\n        path: '/charts/miner-version-distribution',\n      },\n    ],\n  },\n  {\n    category: i18n.t('statistic.category_activities'),\n    charts: [\n      {\n        title: `${i18n.t('statistic.transaction_count')}`,\n        chart: <TransactionCountChart isThumbnail />,\n        path: '/charts/transaction-count',\n      },\n      {\n        title: `${i18n.t('statistic.address_count')}`,\n        chart: <AddressCountChart isThumbnail />,\n        path: '/charts/address-count',\n        description: i18n.t('statistic.address_count_description'),\n      },\n      {\n        title: i18n.t('statistic.cell_count'),\n        chart: <CellCountChart isThumbnail />,\n        path: '/charts/cell-count',\n      },\n      {\n        title: `${i18n.t('statistic.balance_ranking')}`,\n        chart: <AddressBalanceRankChart isThumbnail />,\n        path: '/charts/address-balance-rank',\n        description: i18n.t('statistic.balance_ranking_description'),\n      },\n      {\n        title: `${i18n.t('statistic.balance_distribution')}`,\n        chart: <BalanceDistributionChart isThumbnail />,\n        path: '/charts/balance-distribution',\n        description: i18n.t('statistic.balance_distribution_description'),\n      },\n      {\n        title: `${i18n.t('statistic.tx_fee_history')}`,\n        chart: <TxFeeHistoryChart isThumbnail />,\n        path: '/charts/tx-fee-history',\n        description: i18n.t('statistic.tx_fee_description'),\n      },\n    ],\n  },\n  {\n    category: i18n.t('blockchain.nervos_dao'),\n    charts: [\n      {\n        title: `${i18n.t('statistic.total_dao_deposit_title')}`,\n        chart: <TotalDaoDepositChart isThumbnail />,\n        path: '/charts/total-dao-deposit',\n        description: i18n.t('statistic.total_dao_deposit_description'),\n      },\n      {\n        title: `${i18n.t('statistic.new_dao_deposit_title')}`,\n        chart: <NewDaoDepositChart isThumbnail />,\n        path: '/charts/new-dao-deposit',\n      },\n      {\n        title: `${i18n.t('statistic.circulation_ratio')}`,\n        chart: <CirculationRatioChart isThumbnail />,\n        path: '/charts/circulation-ratio',\n        description: i18n.t('statistic.deposit_to_circulation_ratio_description'),\n      },\n    ],\n  },\n  {\n    category: i18n.t('statistic.category_monetary'),\n    charts: [\n      {\n        title: `${i18n.t('statistic.total_supply')}`,\n        chart: <TotalSupplyChart isThumbnail />,\n        path: '/charts/total-supply',\n        description: i18n.t('statistic.total_supply_description'),\n      },\n      {\n        title: `${i18n.t('statistic.nominal_apc')}`,\n        chart: <AnnualPercentageCompensationChart isThumbnail />,\n        path: '/charts/nominal-apc',\n        description: i18n.t('statistic.nominal_rpc_description'),\n      },\n      {\n        title: `${i18n.t('nervos_dao.secondary_issuance')}`,\n        chart: <SecondaryIssuanceChart isThumbnail />,\n        path: '/charts/secondary-issuance',\n        description: i18n.t('statistic.secondary_issuance_description'),\n      },\n      {\n        title: `${i18n.t('statistic.inflation_rate')}`,\n        chart: <InflationRateChart isThumbnail />,\n        path: '/charts/inflation-rate',\n        description: i18n.t('statistic.inflation_rate_description'),\n      },\n      {\n        title: `${i18n.t('statistic.liquidity')}`,\n        chart: <LiquidityChart isThumbnail />,\n        path: '/charts/liquidity',\n      },\n    ],\n  },\n]\n\nexport default () => {\n  return (\n    <Content>\n      <ChartsContent className=\"container\">\n        <ChartsTitle>{i18n.t('statistic.charts_title')}</ChartsTitle>\n        {chartsData().map(chartData => (\n          <ChartsPanel key={chartData.category}>\n            <div className=\"charts__category__title\">{chartData.category}</div>\n            <div className=\"charts__category__panel\">\n              {chartData.charts.map(chart => (\n                <ChartCard chartData={chart} key={chart.title} />\n              ))}\n            </div>\n          </ChartsPanel>\n        ))}\n      </ChartsContent>\n    </Content>\n  )\n}\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { handleDifficulty } from '../../../utils/number'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticDifficulty } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticDifficulties: State.StatisticDifficulty[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '5%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 70 : 35)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              dataList[0].data[0]\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}\\\n          ${widthSpan(i18n.t('block.difficulty'))} ${handleDifficulty(dataList[0].data[1])}</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('block.difficulty'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('block.difficulty'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'value',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticDifficulties.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(data.avgDifficulty).toNumber(),\n      ]),\n      dimensions: ['timestamp', 'value'],\n    },\n  }\n}\n\nconst toCSV = (statisticDifficulties: State.StatisticDifficulty[]) =>\n  statisticDifficulties ? statisticDifficulties.map(data => [data.createdAtUnixtimestamp, data.avgDifficulty]) : []\n\nexport const DifficultyChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('block.difficulty')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticDifficulty}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.Difficulty}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default DifficultyChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { handleDifficulty, handleHashRate } from '../../../utils/number'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { fetchStatisticDifficultyHashRate } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\n\nconst getOption = (\n  statisticDifficultyHashRates: State.StatisticDifficultyHashRate[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '4%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = () => ({\n    left: '3%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  })\n\n  const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 70 : 50)\n\n  const parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: string }): string => {\n    if (seriesName === i18n.t('block.uncle_rate')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('block.uncle_rate'))} ${data}%</div>`\n    }\n    if (seriesName === i18n.t('block.difficulty')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('block.difficulty'))} ${handleDifficulty(data)}</div>`\n    }\n    if (seriesName.startsWith(i18n.t('block.hash_rate'))) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('block.hash_rate'))} ${handleHashRate(data)}</div>`\n    }\n    return ''\n  }\n  return {\n    color: chartColor.moreColors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any): string => {\n            const list = dataList as Array<SeriesItem & { data: string }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('block.epoch'))} ${list[0].name}</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: !isThumbnail\n      ? {\n          data: [\n            {\n              name: i18n.t('block.difficulty'),\n            },\n            {\n              name: i18n.t('block.hash_rate_hps'),\n            },\n            {\n              name: i18n.t('block.uncle_rate'),\n            },\n          ],\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid(),\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('block.epoch'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n        data: statisticDifficultyHashRates.map(data => data.epochNumber),\n        axisLabel: {\n          formatter: (value: string) => value,\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('block.difficulty'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.moreColors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n      {\n        position: 'right',\n        name: isMobile || isThumbnail ? '' : i18n.t('block.hash_rate_hps'),\n        type: 'value',\n        splitLine: {\n          show: false,\n        },\n        axisLine: {\n          lineStyle: {\n            color: chartColor.moreColors[1],\n          },\n        },\n        scale: true,\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n      {\n        position: 'right',\n        type: 'value',\n        max: 100,\n        show: false,\n        axisLabel: {\n          formatter: () => '',\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('block.difficulty'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        data: statisticDifficultyHashRates.map(data => new BigNumber(data.difficulty).toNumber()),\n      },\n      {\n        name: i18n.t('block.hash_rate_hps'),\n        type: 'line',\n        yAxisIndex: 1,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        data: statisticDifficultyHashRates.map(data => new BigNumber(data.hashRate).toNumber()),\n      },\n      {\n        name: i18n.t('block.uncle_rate'),\n        type: 'line',\n        smooth: true,\n        yAxisIndex: 2,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        z: 0,\n        markLine: isThumbnail\n          ? undefined\n          : {\n              symbol: 'none',\n              data: [\n                {\n                  name: i18n.t('block.uncle_rate_target'),\n                  yAxis: 2.5,\n                },\n              ],\n              label: {\n                formatter: (params: any) => `${params.value}%`,\n              },\n            },\n        data: statisticDifficultyHashRates.map(data => (Number(data.uncleRate) * 100).toFixed(2)),\n      },\n    ],\n  }\n}\n\nconst toCSV = (statisticDifficultyHashRates: State.StatisticDifficultyHashRate[]) =>\n  statisticDifficultyHashRates\n    ? statisticDifficultyHashRates.map(data => [data.epochNumber, data.difficulty, data.hashRate, data.uncleRate])\n    : []\n\nexport const DifficultyHashRateChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={`${t('block.difficulty')} & ${t('block.hash_rate')} & ${t('block.uncle_rate')}`}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticDifficultyHashRate}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.DifficultyHashRate}\n      cacheMode=\"epoch\"\n    />\n  )\n}\n\nexport default DifficultyHashRateChart\n","import { FC } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { handleAxis } from '../../../utils/chart'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { parseHourFromMillisecond } from '../../../utils/date'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticDifficultyUncleRateEpoch } from '../../../service/http/fetcher'\n\nconst widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 90 : 80)\n\nconst parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: string }) => {\n  if (seriesName === i18n.t('block.epoch_time')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('block.epoch_time'))} ${data} h</div>`\n  }\n  if (seriesName === i18n.t('block.epoch_length')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('block.epoch_length'))} ${data}</div>`\n  }\n  return ''\n}\n\nconst getOption = (\n  statisticChartData: State.StatisticDifficultyUncleRateEpoch[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '4%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n\n  const COUNT_IN_THUMBNAIL = 90\n  const epochNumberSerie = statisticChartData.map(data => data.epochNumber)\n  const epochTimeSerie = statisticChartData.map(data => parseHourFromMillisecond(data.epochTime))\n  const epochLengthSerie = statisticChartData.map(data => data.epochLength)\n  const endValue = statisticChartData[statisticChartData.length - 1]?.epochNumber ?? '0'\n  const startValue = Math.max(+endValue - COUNT_IN_THUMBNAIL, 0).toString()\n\n  return {\n    color: chartColor.moreColors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: string }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('block.epoch'))} ${list[0].name}</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: !isThumbnail\n      ? {\n          data: [\n            {\n              name: i18n.t('block.epoch_time'),\n            },\n            {\n              name: i18n.t('block.epoch_length'),\n            },\n          ],\n          textStyle: {\n            fontSize: isMobile ? 11 : 14,\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail\n      ? []\n      : [\n          {\n            show: true,\n            realtime: true,\n            startValue,\n            endValue,\n            xAxisIndex: [0],\n          },\n          {\n            type: 'inside',\n            realtime: true,\n            startValue,\n            endValue,\n            xAxisIndex: [0],\n          },\n        ],\n\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('block.epoch'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: true,\n        data: isThumbnail ? epochNumberSerie.slice(-1 * COUNT_IN_THUMBNAIL) : epochNumberSerie,\n        axisLabel: {\n          formatter: (value: string) => value,\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('block.epoch_time'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.moreColors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n      {\n        position: 'right',\n        name: isMobile || isThumbnail ? '' : i18n.t('block.epoch_length'),\n        type: 'value',\n        scale: true,\n        splitLine: {\n          show: false,\n        },\n        axisLine: {\n          lineStyle: {\n            color: chartColor.moreColors[1],\n          },\n        },\n      },\n      {\n        position: 'left',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.moreColors[0],\n          },\n        },\n        axisLabel: {\n          formatter: () => '',\n        },\n      },\n      {\n        position: 'right',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.moreColors[1],\n          },\n        },\n        axisLabel: {\n          formatter: () => '',\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('block.epoch_time'),\n        type: 'bar',\n        step: 'start',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 5,\n        data: isThumbnail ? epochTimeSerie.slice(-1 * COUNT_IN_THUMBNAIL) : epochTimeSerie,\n      },\n      {\n        name: i18n.t('block.epoch_length'),\n        type: 'bar',\n        step: 'start',\n        yAxisIndex: 1,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 5,\n        data: isThumbnail ? epochLengthSerie.slice(-1 * COUNT_IN_THUMBNAIL) : epochLengthSerie,\n      },\n    ],\n  }\n}\n\nconst toCSV = (statisticDifficultyUncleRateEpochs: State.StatisticDifficultyUncleRateEpoch[]) =>\n  statisticDifficultyUncleRateEpochs\n    ? statisticDifficultyUncleRateEpochs.map(data => [data.epochNumber, data.epochTime, data.epochLength])\n    : []\n\nexport const DifficultyUncleRateEpochChart: FC<{ isThumbnail?: boolean }> = ({ isThumbnail = false }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={`${t('block.epoch_time')} & ${t('block.epoch_length')}`}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticDifficultyUncleRateEpoch}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.DifficultyUncleRateEpoch}\n      cacheMode=\"epoch\"\n    />\n  )\n}\n\nexport default DifficultyUncleRateEpochChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { handleHashRate } from '../../../utils/number'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { fetchStatisticHashRate } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\n\nconst getOption = (\n  statisticHashRates: State.StatisticHashRate[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '5%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 75 : 50)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              dataList[0].data[0]\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(\n              i18n.t('block.hash_rate'),\n            )} ${handleHashRate(dataList[0].data[1])}</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('block.hash_rate'),\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('block.hash_rate'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n      },\n    ],\n    dataset: {\n      source: statisticHashRates.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(data.avgHashRate).toNumber(),\n      ]),\n      dimensions: ['timestamp', 'value'],\n    },\n  }\n}\n\nconst toCSV = (statisticHashRates: State.StatisticHashRate[]) =>\n  statisticHashRates ? statisticHashRates.map(data => [data.createdAtUnixtimestamp, data.avgHashRate]) : []\n\nexport const HashRateChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('block.hash_rate')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticHashRate}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.HashRate}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default HashRateChart\n","import { useCallback } from 'react'\nimport { useHistory } from 'react-router'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { tooltipColor, tooltipWidth, SmartChartPage, SmartChartPageProps } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticMinerAddressDistribution } from '../../../service/http/fetcher'\nimport { useAdaptMobileEllipsis, useAdaptPCEllipsis, useIsMobile } from '../../../utils/hook'\n\nconst Colors = [\n  '#069ECD',\n  '#69C7D4',\n  '#AACFE9',\n  '#29B97A',\n  '#66CC99',\n  '#228159',\n  '#525860',\n  '#74808E',\n  '#9DA6B0',\n  '#FBB04C',\n]\n\nconst getOption = (\n  statisticMinerAddresses: State.StatisticMinerAddress[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n  getAdaptAddressText: (address: string) => string,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '5%',\n    bottom: '5%',\n    containLabel: true,\n  }\n\n  return {\n    color: [chartColor.colors[0], ...Colors],\n    tooltip: !isThumbnail\n      ? {\n          formatter: (data: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 60 : 65)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(\n              i18n.t('statistic.address'),\n            )} ${getAdaptAddressText(data.data.title)}</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.miner_ratio'))} ${(\n              Number(data.data.value) * 100\n            ).toFixed(1)}%</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    series: [\n      {\n        name: i18n.t('statistic.miner_ratio'),\n        type: 'pie',\n        radius: isMobile || isThumbnail ? '50%' : '75%',\n        center: ['50%', '50%'],\n        itemStyle: {\n          emphasis: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)',\n          },\n        },\n        data: statisticMinerAddresses.map(data => ({\n          name: `${getAdaptAddressText(data.address.toLowerCase())} (${(Number(data.radio) * 100).toFixed(1)}%)`,\n          title: data.address.toLowerCase(),\n          value: data.radio,\n        })),\n      },\n    ],\n  }\n}\n\nconst fetchStatisticMinerAddresses = async () => {\n  const {\n    attributes: { minerAddressDistribution },\n  } = await fetchStatisticMinerAddressDistribution()\n  const blockSum = Object.values(minerAddressDistribution).reduce((sum, val) => sum + Number(val), 0)\n  const statisticMinerAddresses: State.StatisticMinerAddress[] = Object.entries(minerAddressDistribution).map(\n    ([key, val]) => ({\n      address: key,\n      radio: (Number(val) / blockSum).toFixed(3),\n    }),\n  )\n  return statisticMinerAddresses\n}\n\nconst toCSV = (statisticMinerAddresses: State.StatisticMinerAddress[]) =>\n  statisticMinerAddresses ? statisticMinerAddresses.map(data => [data.address, data.radio]) : []\n\nexport const MinerAddressDistributionChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n\n  const history = useHistory()\n  const clickEvent = useCallback(\n    (param: any) => {\n      if (param && param.data.title) {\n        history.push(`/address/${param.data.title}`)\n      }\n    },\n    [history],\n  )\n\n  const isMobile = useIsMobile()\n  const adaptMobileEllipsis = useAdaptMobileEllipsis()\n  const adaptPCEllipsis = useAdaptPCEllipsis(80)\n  const getEChartOption: SmartChartPageProps<State.StatisticMinerAddress>['getEChartOption'] = useCallback(\n    (...args) =>\n      getOption(...args, address => (isMobile ? adaptMobileEllipsis(address, 4) : adaptPCEllipsis(address, 2))),\n    [adaptMobileEllipsis, adaptPCEllipsis, isMobile],\n  )\n\n  return (\n    <SmartChartPage\n      title={t('statistic.miner_addresses_rank')}\n      isThumbnail={isThumbnail}\n      chartProps={{ clickEvent: !isThumbnail ? clickEvent : undefined }}\n      fetchData={fetchStatisticMinerAddresses}\n      getEChartOption={getEChartOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.MinerAddressDistribution}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default MinerAddressDistributionChart\n","import { useTranslation } from 'react-i18next'\nimport { EChartOption } from 'echarts'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticMinerVersionDistribution } from '../../../service/http/fetcher'\n\nconst Colors = [\n  '#069ECD',\n  '#69C7D4',\n  '#AACFE9',\n  '#29B97A',\n  '#66CC99',\n  '#228159',\n  '#525860',\n  '#74808E',\n  '#9DA6B0',\n  '#FBB04C',\n]\n\ninterface VersionRecord {\n  version: string\n  percent: number\n}\n\nconst getOption = (\n  list: Array<VersionRecord>,\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '5%',\n    bottom: '5%',\n    containLabel: true,\n  }\n\n  const tooltip: EChartOption.Tooltip | undefined = !isThumbnail\n    ? {\n        formatter: data => {\n          const item = Array.isArray(data) ? data[0] : data\n          const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 80 : 60)\n          let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.version'))} ${\n            item.data.title\n          }</div>`\n          result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.percent'))} ${\n            item.data.value\n          }%</div>`\n          return result\n        },\n      }\n    : {\n        show: false,\n      }\n\n  return {\n    color: [chartColor.colors[0], ...Colors],\n    tooltip,\n    grid: isThumbnail ? gridThumbnail : grid,\n    legend: {\n      show: !isThumbnail,\n      right: 40,\n      bottom: 40,\n      orient: 'vertical',\n      icon: 'circle',\n    },\n    series: [\n      {\n        name: i18n.t('statistic.miner_version_distribution'),\n        type: 'pie',\n        radius: isMobile || isThumbnail ? '50%' : '75%',\n        center: ['50%', '50%'],\n        itemStyle: {\n          emphasis: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(0, 0, 0, 0.5)',\n          },\n        },\n        data: list.map(data => {\n          const version = data.version === 'others' ? i18n.t(`statistic.others`) : data.version\n          return {\n            name: `${version} (${data.percent}%)`,\n            title: version,\n            value: data.percent,\n          }\n        }),\n      },\n    ],\n  }\n}\n\nconst fetchData = async () => {\n  const { data: list } = await fetchStatisticMinerVersionDistribution()\n  const totalBlocks = list.reduce((acc, cur) => acc + cur.blocksCount, 0)\n  return list.map(v => ({\n    version: v.version,\n    percent: +((100 * v.blocksCount) / totalBlocks).toFixed(2),\n  }))\n}\n\nconst toCSV = (versionList: Array<VersionRecord>) => versionList?.map(r => [r.version, `${r.percent}%`]) ?? []\n\nexport const MinerVersionDistributionChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n\n  return (\n    <SmartChartPage\n      title={t('statistic.miner_version_distribution')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchData}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.MinerVersionDistribution}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default MinerVersionDistributionChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { fetchStatisticUncleRate } from '../../../service/http/fetcher'\nimport { ChartCachedKeys } from '../../../constants/cache'\n\nconst max = (statisticUncleRates: State.StatisticUncleRate[]) => {\n  const array = statisticUncleRates.flatMap(data => Number(data.uncleRate) * 100)\n  return Math.max(5, Math.ceil(Math.max(...array)))\n}\n\nconst getOption = (\n  statisticUncleRates: State.StatisticUncleRate[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '12%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '5%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 75 : 50)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              dataList[0].data[0]\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('block.uncle_rate'))} ${\n              dataList[0].data[1]\n            }%</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('block.uncle_rate'),\n        type: 'value',\n        scale: true,\n        max: max(statisticUncleRates),\n        min: 0,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${value}%`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('block.uncle_rate'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        markLine: {\n          symbol: 'none',\n          data: [\n            {\n              name: i18n.t('block.uncle_rate_target'),\n              yAxis: 2.5,\n            },\n          ],\n          label: {\n            formatter: (label: any) => `${label.data.value}%`,\n          },\n        },\n      },\n    ],\n    dataset: {\n      source: statisticUncleRates.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        (+data.uncleRate * 100).toFixed(2),\n      ]),\n    },\n  }\n}\n\nconst toCSV = (statisticUncleRates: State.StatisticUncleRate[]) =>\n  statisticUncleRates ? statisticUncleRates.map(data => [data.createdAtUnixtimestamp, data.uncleRate]) : []\n\nexport const UncleRateChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('block.uncle_rate')}\n      description={t('statistic.uncle_rate_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticUncleRate}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.UncleRate}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default UncleRateChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticAnnualPercentageCompensation } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticAnnualPercentageCompensations: State.StatisticAnnualPercentageCompensation[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '2%',\n    right: '3%',\n    top: '5%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 220 : 80)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.year'))} ${\n              dataList[0].data[0]\n            }</div>`\n            result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(i18n.t('statistic.nominal_apc'))} ${\n              dataList[0].data[1]\n            }%</div>`\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.year'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n        axisLabel: {\n          interval: isMobile || isThumbnail ? 7 : 3,\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: i18n.t('statistic.nominal_apc'),\n        type: 'value',\n        nameTextStyle: {\n          align: 'left',\n        },\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${value}%`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.nominal_apc'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n      },\n    ],\n    dataset: {\n      source: statisticAnnualPercentageCompensations.map(data => [data.year, (+data.apc).toFixed(2)]),\n    },\n  }\n}\n\nconst fetchStatisticAnnualPercentageCompensations = async () => {\n  const {\n    attributes: { nominalApc },\n  } = await fetchStatisticAnnualPercentageCompensation()\n  const statisticAnnualPercentageCompensations = nominalApc\n    .filter((_apc, index) => index % 3 === 0 || index === nominalApc.length - 1)\n    .map((apc, index) => ({\n      year: 0.25 * index,\n      apc,\n    }))\n  return statisticAnnualPercentageCompensations\n}\n\nconst toCSV = (statisticAnnualPercentageCompensations: State.StatisticAnnualPercentageCompensation[]) =>\n  statisticAnnualPercentageCompensations\n    ? statisticAnnualPercentageCompensations.map(data => [data.year, (Number(data.apc) / 100).toFixed(4)])\n    : []\n\nexport const AnnualPercentageCompensationChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.nominal_apc')}\n      description={t('statistic.nominal_rpc_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticAnnualPercentageCompensations}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.APC}\n      cacheMode=\"forever\"\n    />\n  )\n}\n\nexport default AnnualPercentageCompensationChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticInflationRate } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticInflationRates: State.StatisticInflationRate[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '4%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n\n  const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 220 : 80)\n\n  const parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: string }): string => {\n    if (seriesName === i18n.t('statistic.nominal_inflation_rate')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.nominal_inflation_rate'))} ${data}%</div>`\n    }\n    if (seriesName === i18n.t('statistic.nominal_apc')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.nominal_apc'))} ${data}%</div>`\n    }\n    if (seriesName === i18n.t('statistic.real_inflation_rate')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.real_inflation_rate'))} ${data}%</div>`\n    }\n    return ''\n  }\n  return {\n    color: chartColor.moreColors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: string }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.year'))} ${list[0].name}</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: {\n      data: isThumbnail\n        ? []\n        : [\n            {\n              name: i18n.t('statistic.real_inflation_rate'),\n            },\n            {\n              name: i18n.t('statistic.nominal_apc'),\n            },\n            {\n              name: i18n.t('statistic.nominal_inflation_rate'),\n            },\n          ],\n    },\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.year'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n        data: statisticInflationRates.map(data => data.year),\n        axisLabel: {\n          interval: isMobile || isThumbnail ? 11 : 3,\n          formatter: (value: string) => value,\n        },\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        type: 'value',\n        axisLine: {\n          lineStyle: {\n            color: chartColor.moreColors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${value}%`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.nominal_inflation_rate'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        lineStyle: {\n          type: 'dashed',\n        },\n        data: statisticInflationRates.map(data => Number(data.nominalInflationRate).toFixed(4)),\n      },\n      {\n        name: i18n.t('statistic.nominal_apc'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        lineStyle: {\n          type: 'dashed',\n        },\n        data: statisticInflationRates.map(data => Number(data.nominalApc).toFixed(4)),\n      },\n      {\n        name: i18n.t('statistic.real_inflation_rate'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        lineStyle: {\n          type: 'solid',\n          width: 3,\n        },\n        data: statisticInflationRates.map(data => Number(data.realInflationRate).toFixed(4)),\n      },\n    ],\n  }\n}\n\nconst fetchStatisticInflationRates = async () => {\n  const {\n    attributes: { nominalApc, nominalInflationRate, realInflationRate },\n  } = await fetchStatisticInflationRate()\n  const statisticInflationRates = []\n  for (let i = 0; i < nominalApc.length; i++) {\n    if (i % 6 === 0 || i === nominalApc.length - 1) {\n      statisticInflationRates.push({\n        year: i % 6 === 0 ? Math.floor(i / 6) * 0.5 : 50,\n        nominalApc: nominalApc[i],\n        nominalInflationRate: nominalInflationRate[i],\n        realInflationRate: realInflationRate[i],\n      })\n    }\n  }\n  return statisticInflationRates\n}\n\nconst toCSV = (statisticInflationRates: State.StatisticInflationRate[]) =>\n  statisticInflationRates\n    ? statisticInflationRates.map(data => [\n        data.year,\n        Number(data.nominalApc).toFixed(4),\n        Number(data.nominalInflationRate).toFixed(4),\n        Number(data.realInflationRate).toFixed(4),\n      ])\n    : []\n\nexport const InflationRateChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.inflation_rate')}\n      description={t('statistic.inflation_rate_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticInflationRates}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.InflationRate}\n      cacheMode=\"forever\"\n    />\n  )\n}\n\nexport default InflationRateChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { shannonToCkb, shannonToCkbDecimal } from '../../../utils/util'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticLiquidity } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticLiquidity: State.StatisticLiquidity[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '4%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n\n  const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 140 : 120)\n\n  const parseTooltip = ({\n    seriesName,\n    data,\n    color,\n  }: SeriesItem & { data: [string, string, string, string] }): string => {\n    if (seriesName === i18n.t('statistic.circulating_supply')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.circulating_supply'))} ${handleAxis(\n        data[3],\n        2,\n      )}</div>`\n    }\n    if (seriesName === i18n.t('statistic.dao_deposit')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.dao_deposit'))} ${handleAxis(data[2], 2)}</div>`\n    }\n    if (seriesName === i18n.t('statistic.tradable')) {\n      return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.tradable'))} ${handleAxis(data[1], 2)}</div>`\n    }\n    return ''\n  }\n  return {\n    color: chartColor.liquidityColors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: [string, string, string, string] }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              list[0].data[0]\n            }</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: {\n      data: isThumbnail\n        ? []\n        : [\n            {\n              name: i18n.t('statistic.circulating_supply'),\n            },\n            {\n              name: i18n.t('statistic.dao_deposit'),\n            },\n            {\n              name: i18n.t('statistic.tradable'),\n            },\n          ],\n    },\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        type: 'value',\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(value),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.tradable'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n        areaStyle: {\n          origin: 'start',\n        },\n        encode: {\n          x: 'timestamp',\n          y: 'liquidity',\n        },\n      },\n      {\n        name: i18n.t('statistic.dao_deposit'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n        areaStyle: {\n          origin: 'start',\n        },\n        encode: {\n          x: 'timestamp',\n          y: 'deposit',\n        },\n      },\n      {\n        name: i18n.t('statistic.circulating_supply'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'circulating',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticLiquidity.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        shannonToCkb(data.liquidity),\n        shannonToCkb(data.daoDeposit),\n        shannonToCkb(data.circulatingSupply),\n      ]),\n      dimensions: ['timestamp', 'liquidity', 'deposit', 'circulating'],\n    },\n  }\n}\n\nconst toCSV = (statisticLiquidity: State.StatisticLiquidity[]) =>\n  statisticLiquidity\n    ? statisticLiquidity.map(data => [\n        data.createdAtUnixtimestamp,\n        shannonToCkbDecimal(data.circulatingSupply, 8),\n        shannonToCkbDecimal(data.daoDeposit, 8),\n        shannonToCkbDecimal(data.liquidity, 8),\n      ])\n    : []\n\nexport const LiquidityChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.liquidity')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticLiquidity}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.Liquidity}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default LiquidityChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticSecondaryIssuance } from '../../../service/http/fetcher'\n\nconst widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 155 : 70)\n\nconst parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: [string, string, string, string] }): string => {\n  if (seriesName === i18n.t('nervos_dao.deposit_compensation')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('nervos_dao.deposit_compensation'))} ${data[3]}%</div>`\n  }\n  if (seriesName === i18n.t('nervos_dao.mining_reward')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('nervos_dao.mining_reward'))} ${data[2]}%</div>`\n  }\n  if (seriesName === i18n.t('nervos_dao.burnt')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('nervos_dao.burnt'))} ${data[1]}%</div>`\n  }\n  return ''\n}\n\nconst getOption = (\n  statisticSecondaryIssuance: State.StatisticSecondaryIssuance[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '4%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.secondaryIssuanceColors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: [string, string, string, string] }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              dataList[0].data[0]\n            }</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: {\n      data: isThumbnail\n        ? []\n        : [\n            {\n              name: i18n.t('nervos_dao.burnt'),\n            },\n            {\n              name: i18n.t('nervos_dao.mining_reward'),\n            },\n            {\n              name: i18n.t('nervos_dao.deposit_compensation'),\n            },\n          ],\n    },\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        type: 'value',\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${value}%`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('nervos_dao.burnt'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n        areaStyle: {},\n        encode: {\n          x: 'timestamp',\n          y: 'treasury',\n        },\n      },\n      {\n        name: i18n.t('nervos_dao.mining_reward'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n        areaStyle: {},\n        encode: {\n          x: 'timestamp',\n          y: 'reward',\n        },\n      },\n      {\n        name: i18n.t('nervos_dao.deposit_compensation'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n        areaStyle: {},\n        encode: {\n          x: 'timestamp',\n          y: 'compensation',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticSecondaryIssuance.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        data.treasuryAmount,\n        data.miningReward,\n        data.depositCompensation,\n      ]),\n      dimensions: ['timestamp', 'treasury', 'reward', 'compensation'],\n    },\n  }\n}\n\nconst toCSV = (statisticSecondaryIssuance: State.StatisticSecondaryIssuance[]) =>\n  statisticSecondaryIssuance\n    ? statisticSecondaryIssuance.map(data => [\n        data.createdAtUnixtimestamp,\n        data.treasuryAmount,\n        data.miningReward,\n        data.depositCompensation,\n      ])\n    : []\n\nexport const SecondaryIssuanceChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('nervos_dao.secondary_issuance')}\n      description={t('statistic.secondary_issuance_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticSecondaryIssuance}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.SecondaryIssuance}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default SecondaryIssuanceChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { shannonToCkb, shannonToCkbDecimal } from '../../../utils/util'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticTotalSupply } from '../../../service/http/fetcher'\n\nconst widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 125 : 80)\n\nconst parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: [string, string, string, string] }): string => {\n  if (seriesName === i18n.t('statistic.burnt')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.burnt'))} ${handleAxis(data[3], 2)}</div>`\n  }\n  if (seriesName === i18n.t('statistic.locked')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.locked'))} ${handleAxis(data[2], 2)}</div>`\n  }\n  if (seriesName === i18n.t('statistic.circulating_supply')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.circulating_supply'))} ${handleAxis(\n      data[1],\n      2,\n    )}</div>`\n  }\n  return ''\n}\n\nconst getOption = (\n  statisticTotalSupplies: State.StatisticTotalSupply[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '8%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.totalSupplyColors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: [string, string, string, string] }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              list[0].data[0]\n            }</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    legend: {\n      data: isThumbnail\n        ? []\n        : [\n            {\n              name: i18n.t('statistic.circulating_supply'),\n            },\n            {\n              name: i18n.t('statistic.locked'),\n            },\n            {\n              name: i18n.t('statistic.burnt'),\n            },\n          ],\n    },\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        type: 'value',\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => handleAxis(new BigNumber(value)),\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.circulating_supply'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n        areaStyle: {\n          color: chartColor.totalSupplyColors[0],\n        },\n        encode: {\n          x: 'timestamp',\n          y: 'circulating',\n        },\n      },\n      {\n        name: i18n.t('statistic.locked'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n        areaStyle: {\n          color: chartColor.totalSupplyColors[1],\n        },\n        encode: {\n          x: 'timestamp',\n          y: 'locked',\n        },\n      },\n      {\n        name: i18n.t('statistic.burnt'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        stack: 'sum',\n        areaStyle: {\n          color: chartColor.totalSupplyColors[2],\n        },\n        encode: {\n          x: 'timestamp',\n          y: 'burnt',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticTotalSupplies.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(shannonToCkb(data.circulatingSupply)).toFixed(0),\n        new BigNumber(shannonToCkb(data.lockedCapacity)).toFixed(0),\n        new BigNumber(shannonToCkb(data.burnt)).toFixed(0),\n      ]),\n      dimensions: ['timestamp', 'circulating', 'locked', 'burnt'],\n    },\n  }\n}\n\nconst toCSV = (statisticTotalSupplies: State.StatisticTotalSupply[]) =>\n  statisticTotalSupplies\n    ? statisticTotalSupplies.map(data => [\n        data.createdAtUnixtimestamp,\n        shannonToCkbDecimal(data.circulatingSupply, 8),\n        shannonToCkbDecimal(data.lockedCapacity, 8),\n        shannonToCkbDecimal(data.burnt, 8),\n      ])\n    : []\n\nexport const TotalSupplyChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.total_supply')}\n      description={t('statistic.total_supply_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticTotalSupply}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.TotalSupply}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default TotalSupplyChart\n","import { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { tooltipColor, tooltipWidth, SmartChartPage } from '../common'\nimport { DATA_ZOOM_CONFIG } from '../../../utils/chart'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticCirculationRatio } from '../../../service/http/fetcher'\n\nconst getOption = (\n  statisticCirculationRatios: State.StatisticCirculationRatio[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '3%',\n    right: '3%',\n    top: '5%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 185 : 165)\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              dataList[0].data[0]\n            }</div>`\n            if (dataList[0].data) {\n              result += `<div>${tooltipColor(chartColor.colors[0])}${widthSpan(\n                i18n.t('statistic.circulation_ratio'),\n              )} ${dataList[0].data[1]}%</div>`\n            }\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.circulation_ratio'),\n        nameTextStyle: {\n          align: 'left',\n        },\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${value}%`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.circulation_ratio'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n      },\n    ],\n    dataset: {\n      source: statisticCirculationRatios.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        (+data.circulationRatio * 100).toFixed(2),\n      ]),\n    },\n  }\n}\n\nconst toCSV = (statisticCirculationRatios: State.StatisticCirculationRatio[]) =>\n  statisticCirculationRatios\n    ? statisticCirculationRatios.map(data => [data.createdAtUnixtimestamp, data.circulationRatio])\n    : []\n\nexport const CirculationRatioChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.circulation_ratio')}\n      description={t('statistic.deposit_to_circulation_ratio_description')}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticCirculationRatio}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.DepositCirculationRatio}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default CirculationRatioChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { shannonToCkb, shannonToCkbDecimal } from '../../../utils/util'\nimport { isMainnet } from '../../../utils/chain'\nimport { tooltipWidth, tooltipColor, SeriesItem, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticNewDaoDeposit } from '../../../service/http/fetcher'\n\nconst widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 140 : 120)\n\nconst parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: [string, string, string] }): string => {\n  if (seriesName === i18n.t('statistic.new_dao_deposit')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.new_dao_deposit'))} ${handleAxis(\n      data[1],\n      2,\n    )}</div>`\n  }\n  if (seriesName === i18n.t('statistic.new_dao_depositor')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.new_dao_depositor'))} ${handleAxis(\n      data[2],\n      2,\n      true,\n    )}</div>`\n  }\n  return ''\n}\n\nconst getOption = (\n  statisticNewDaoDeposits: State.StatisticNewDaoDeposit[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '4%',\n    right: '3%',\n    top: '6%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as (SeriesItem & { data: [string, string, string] })[]\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              list[0].data[0]\n            }</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    legend: {\n      data: isThumbnail\n        ? []\n        : [\n            {\n              name: i18n.t('statistic.new_dao_deposit'),\n            },\n            {\n              name: i18n.t('statistic.new_dao_depositor'),\n            },\n          ],\n    },\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.new_dao_deposit'),\n        nameTextStyle: {\n          align: 'left',\n        },\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${handleAxis(value)}B`,\n        },\n      },\n      {\n        position: 'right',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.new_dao_depositor'),\n        nameTextStyle: {\n          align: 'right',\n        },\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[1],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${handleAxis(new BigNumber(value))}`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.new_dao_deposit'),\n        type: 'line',\n        yAxisIndex: 0,\n        areaStyle: {\n          color: chartColor.areaColor,\n        },\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'deposit',\n        },\n      },\n      {\n        name: i18n.t('statistic.new_dao_depositor'),\n        type: 'line',\n        yAxisIndex: 1,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'depositor',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticNewDaoDeposits.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(shannonToCkb(data.dailyDaoDeposit)).toFixed(0),\n        new BigNumber(data.dailyDaoDepositorsCount).toNumber(),\n      ]),\n      dimensions: ['timestamp', 'deposit', 'depositor'],\n    },\n  }\n}\n\nconst toCSV = (statisticNewDaoDeposits: State.StatisticNewDaoDeposit[]) =>\n  statisticNewDaoDeposits\n    ? statisticNewDaoDeposits.map(data => [\n        data.createdAtUnixtimestamp,\n        shannonToCkbDecimal(data.dailyDaoDeposit, 8),\n        data.dailyDaoDepositorsCount,\n      ])\n    : []\n\nexport const NewDaoDepositChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.new_dao_deposit_depositor')}\n      note={isMainnet() ? `${t('common.note')}1MB = 1,000,000 CKBytes` : undefined}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticNewDaoDeposit}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.DailyDeposit}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default NewDaoDepositChart\n","import BigNumber from 'bignumber.js'\nimport { useTranslation } from 'react-i18next'\nimport i18n, { currentLanguage } from '../../../utils/i18n'\nimport { DATA_ZOOM_CONFIG, handleAxis } from '../../../utils/chart'\nimport { parseDateNoTime } from '../../../utils/date'\nimport { shannonToCkb, shannonToCkbDecimal } from '../../../utils/util'\nimport { isMainnet } from '../../../utils/chain'\nimport { tooltipColor, tooltipWidth, SeriesItem, SmartChartPage } from '../common'\nimport { ChartCachedKeys } from '../../../constants/cache'\nimport { fetchStatisticTotalDaoDeposit } from '../../../service/http/fetcher'\n\nconst widthSpan = (value: string) => tooltipWidth(value, currentLanguage() === 'en' ? 168 : 110)\n\nconst parseTooltip = ({ seriesName, data, color }: SeriesItem & { data: [string, string, string] }): string => {\n  if (seriesName === i18n.t('statistic.total_dao_deposit')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.total_dao_deposit'))} ${handleAxis(\n      data[1],\n      2,\n    )}</div>`\n  }\n  if (seriesName === i18n.t('statistic.total_dao_depositor')) {\n    return `<div>${tooltipColor(color)}${widthSpan(i18n.t('statistic.total_dao_depositor'))} ${handleAxis(\n      data[2],\n      2,\n      true,\n    )}</div>`\n  }\n  return ''\n}\n\nconst getOption = (\n  statisticTotalDaoDeposits: State.StatisticTotalDaoDeposit[],\n  chartColor: State.App['chartColor'],\n  isMobile: boolean,\n  isThumbnail = false,\n): echarts.EChartOption => {\n  const gridThumbnail = {\n    left: '4%',\n    right: '10%',\n    top: '8%',\n    bottom: '6%',\n    containLabel: true,\n  }\n  const grid = {\n    left: '4%',\n    right: '3%',\n    top: '6%',\n    bottom: '5%',\n    containLabel: true,\n  }\n  return {\n    color: chartColor.colors,\n    tooltip: !isThumbnail\n      ? {\n          trigger: 'axis',\n          formatter: (dataList: any) => {\n            const list = dataList as Array<SeriesItem & { data: [string, string, string] }>\n            let result = `<div>${tooltipColor('#333333')}${widthSpan(i18n.t('statistic.date'))} ${\n              list[0].data[0]\n            }</div>`\n            list.forEach(data => {\n              result += parseTooltip(data)\n            })\n            return result\n          },\n        }\n      : undefined,\n    grid: isThumbnail ? gridThumbnail : grid,\n    legend: {\n      data: isThumbnail\n        ? []\n        : [\n            {\n              name: i18n.t('statistic.total_dao_deposit'),\n            },\n            {\n              name: i18n.t('statistic.total_dao_depositor'),\n            },\n          ],\n    },\n    dataZoom: isThumbnail ? [] : DATA_ZOOM_CONFIG,\n    xAxis: [\n      {\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.date'),\n        nameLocation: 'middle',\n        nameGap: 30,\n        type: 'category',\n        boundaryGap: false,\n      },\n    ],\n    yAxis: [\n      {\n        position: 'left',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.total_dao_deposit'),\n        nameTextStyle: {\n          align: 'left',\n        },\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[0],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${handleAxis(value)}B`,\n        },\n      },\n      {\n        position: 'right',\n        name: isMobile || isThumbnail ? '' : i18n.t('statistic.total_dao_depositor'),\n        nameTextStyle: {\n          align: 'right',\n        },\n        type: 'value',\n        scale: true,\n        axisLine: {\n          lineStyle: {\n            color: chartColor.colors[1],\n          },\n        },\n        axisLabel: {\n          formatter: (value: string) => `${handleAxis(new BigNumber(value))}`,\n        },\n      },\n    ],\n    series: [\n      {\n        name: i18n.t('statistic.total_dao_deposit'),\n        type: 'line',\n        yAxisIndex: 0,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'deposit',\n        },\n      },\n      {\n        name: i18n.t('statistic.total_dao_depositor'),\n        type: 'line',\n        yAxisIndex: 1,\n        symbol: isThumbnail ? 'none' : 'circle',\n        symbolSize: 3,\n        encode: {\n          x: 'timestamp',\n          y: 'depositor',\n        },\n      },\n    ],\n    dataset: {\n      source: statisticTotalDaoDeposits.map(data => [\n        parseDateNoTime(data.createdAtUnixtimestamp),\n        new BigNumber(shannonToCkb(data.totalDaoDeposit)).toFixed(0),\n        new BigNumber(data.totalDepositorsCount).toNumber(),\n      ]),\n      dimensions: ['timestamp', 'deposit', 'depositor'],\n    },\n  }\n}\n\nconst toCSV = (statisticTotalDaoDeposits: State.StatisticTotalDaoDeposit[]) =>\n  statisticTotalDaoDeposits\n    ? statisticTotalDaoDeposits.map(data => [\n        data.createdAtUnixtimestamp,\n        shannonToCkbDecimal(data.totalDaoDeposit, 8),\n        data.totalDepositorsCount,\n      ])\n    : []\n\nexport const TotalDaoDepositChart = ({ isThumbnail = false }: { isThumbnail?: boolean }) => {\n  const [t] = useTranslation()\n  return (\n    <SmartChartPage\n      title={t('statistic.total_dao_deposit_depositor')}\n      description={t('statistic.total_dao_deposit_description')}\n      note={isMainnet() ? `${t('common.note')}1GB = 1,000,000,000 CKBytes` : undefined}\n      isThumbnail={isThumbnail}\n      fetchData={fetchStatisticTotalDaoDeposit}\n      getEChartOption={getOption}\n      toCSV={toCSV}\n      cacheKey={ChartCachedKeys.TotalDeposit}\n      cacheMode=\"date\"\n    />\n  )\n}\n\nexport default TotalDaoDepositChart\n","import { eventListenerOptionsSupported } from './utils';\n\nconst defaultOptions = {\n  passive: true,\n  capture: false\n};\nconst supportedPassiveTypes = [\n  'scroll', 'wheel',\n  'touchstart', 'touchmove', 'touchenter', 'touchend', 'touchleave',\n  'mouseout', 'mouseleave', 'mouseup', 'mousedown', 'mousemove', 'mouseenter', 'mousewheel', 'mouseover'\n];\nconst getDefaultPassiveOption = (passive, eventName) => {\n  if (passive !== undefined) return passive;\n\n  return supportedPassiveTypes.indexOf(eventName) === -1 ? false : defaultOptions.passive;\n};\n\nconst getWritableOptions = (options) => {\n  const passiveDescriptor = Object.getOwnPropertyDescriptor(options, 'passive');\n    \n  return passiveDescriptor && passiveDescriptor.writable !== true && passiveDescriptor.set === undefined\n    ? Object.assign({}, options)\n    : options;\n};\n\nconst overwriteAddEvent = (superMethod) => {\n  EventTarget.prototype.addEventListener = function (type, listener, options) {\n    const usesListenerOptions = typeof options === 'object' && options !== null;\n    const useCapture          = usesListenerOptions ? options.capture : options;\n\n    options         = usesListenerOptions ? getWritableOptions(options) : {};\n    options.passive = getDefaultPassiveOption(options.passive, type);\n    options.capture = useCapture === undefined ? defaultOptions.capture : useCapture;\n\n    superMethod.call(this, type, listener, options);\n  };\n\n  EventTarget.prototype.addEventListener._original = superMethod;\n};\n\nconst supportsPassive = eventListenerOptionsSupported();\n\nif (supportsPassive) {\n  const addEvent = EventTarget.prototype.addEventListener;\n  overwriteAddEvent(addEvent);\n}\n","export const eventListenerOptionsSupported = () => {\n  let supported = false;\n\n  try {\n    const opts = Object.defineProperty({}, 'passive', {\n      get() {\n        supported = true;\n      }\n    });\n\n    window.addEventListener('test', null, opts);\n    window.removeEventListener('test', null, opts);\n  } catch (e) {}\n\n  return supported;\n}\n"],"names":["getAddressWithRanking","statisticAddressBalanceRanks","ranking","addressBalanceRank","find","rank","address","getOption","chartColor","isMobile","isThumbnail","getAdaptAddressText","gridThumbnail","left","right","top","bottom","containLabel","grid","color","colors","tooltip","undefined","trigger","formatter","dataList","widthSpan","value","tooltipWidth","currentLanguage","result","tooltipColor","i18n","name","localeNumberString","data","dataZoom","DATA_ZOOM_CONFIG","xAxis","nameLocation","nameGap","type","boundaryGap","map","yAxis","position","logBase","scale","axisLine","lineStyle","axisLabel","handleAxis","series","yAxisIndex","barWidth","symbol","symbolSize","shannonToCkb","balance","fetchStatisticAddressBalanceRanks","fetchStatisticAddressBalanceRank","resp","attributes","addressBalanceRanking","toCSV","shannonToCkbDecimal","AddressBalanceRankChart","history","useHistory","useTranslation","t","useState","setStatisticAddressBalanceRanks","clickEvent","useCallback","param","length","push","adaptPCEllipsis","useAdaptPCEllipsis","getEChartOption","args","title","description","chartProps","fetchData","onFetched","cacheKey","ChartCachedKeys","cacheMode","statisticAddressCounts","splitLine","show","nameTextStyle","align","BigNumber","dataset","source","parseDateNoTime","createdAtUnixtimestamp","addressesCount","toNumber","AddressCountChart","fetchStatisticAddressCount","parseTooltip","seriesName","statisticCellCounts","list","forEach","legend","encode","x","y","liveCellsCount","allCellsCount","dimensions","CellCountChart","fetchStatisticCellCount","statisticTransactionCounts","transactionsCount","TransactionCountChart","fetchStatisticTransactionCount","statisticTxFeeHistories","isMainnet","d","totalTxFee","TxFeeHistoryChart","fetchStatisticTxFeeHistory","statisticAverageBlockTimes","maxAndMinAxis","array","flatMap","parseFloat","avgBlockTimeDaily","max","Math","ceil","min","floor","parseSimpleDateNoSecond","Date","parseSimpleDate","timestamp","Number","toFixed","avgBlockTimeWeekly","AverageBlockTimeChart","fetchStatisticAverageBlockTimes","statisticBlockTimeDistributions","time","interval","areaStyle","areaColor","ratio","fetchStatisticBlockTimeDistributions","fetchStatisticBlockTimeDistribution","blockTimeDistribution","sumBlocks","reduce","previous","current","concat","blocks","BlockTimeDistributionChart","statisticEpochTimeDistributions","parseHourFromMinute","epoch","fetchStatisticEpochTimeDistributions","fetchStatisticEpochTimeDistribution","epochTimeDistribution","EpochTimeDistributionChart","ChartsContent","styled","ChartsTitle","ChartsPanel","ChartCardPanel","ChartTitle","chartData","className","placement","src","HelpIcon","alt","ChartCard","useIsMobile","to","path","chart","Content","category","charts","BlockTimeDistribution","EpochTimeDistribution","AverageBlockTime","DifficultyHashRate","DifficultyHashRateChart","DifficultyUncleRateEpoch","DifficultyUncleRateEpochChart","Difficulty","DifficultyChart","HashRate","HashRateChart","UncleRate","UncleRateChart","MinerAddressDistribution","MinerAddressDistributionChart","MinerVersionDistribution","MinerVersionDistributionChart","TransactionCount","AddressCount","CellCount","AddressBalanceRank","BalanceDistribution","BalanceDistributionChart","TxFeeHistory","TotalDaoDeposit","TotalDaoDepositChart","NewDaoDeposit","NewDaoDepositChart","CirculationRatio","CirculationRatioChart","TotalSupply","TotalSupplyChart","AnnualPercentageCompensation","AnnualPercentageCompensationChart","SecondaryIssuance","SecondaryIssuanceChart","InflationRate","InflationRateChart","Liquidity","LiquidityChart","statisticDifficulties","handleDifficulty","avgDifficulty","fetchStatisticDifficulty","statisticDifficultyHashRates","startsWith","handleHashRate","moreColors","epochNumber","difficulty","hashRate","smooth","z","markLine","label","params","uncleRate","fetchStatisticDifficultyHashRate","statisticChartData","COUNT_IN_THUMBNAIL","epochNumberSerie","epochTimeSerie","parseHourFromMillisecond","epochTime","epochLengthSerie","epochLength","endValue","startValue","toString","textStyle","fontSize","realtime","xAxisIndex","slice","step","statisticDifficultyUncleRateEpochs","fetchStatisticDifficultyUncleRateEpoch","statisticHashRates","avgHashRate","fetchStatisticHashRate","Colors","statisticMinerAddresses","radius","center","itemStyle","emphasis","shadowBlur","shadowOffsetX","shadowColor","toLowerCase","radio","fetchStatisticMinerAddresses","fetchStatisticMinerAddressDistribution","minerAddressDistribution","blockSum","Object","values","sum","val","entries","key","adaptMobileEllipsis","useAdaptMobileEllipsis","item","Array","isArray","orient","icon","version","percent","fetchStatisticMinerVersionDistribution","totalBlocks","acc","cur","blocksCount","v","versionList","r","statisticUncleRates","fetchStatisticUncleRate","statisticAnnualPercentageCompensations","stack","year","apc","fetchStatisticAnnualPercentageCompensations","fetchStatisticAnnualPercentageCompensation","nominalApc","filter","_apc","index","statisticInflationRates","nominalInflationRate","width","realInflationRate","fetchStatisticInflationRates","fetchStatisticInflationRate","i","statisticLiquidity","liquidityColors","origin","liquidity","daoDeposit","circulatingSupply","fetchStatisticLiquidity","statisticSecondaryIssuance","secondaryIssuanceColors","treasuryAmount","miningReward","depositCompensation","fetchStatisticSecondaryIssuance","statisticTotalSupplies","totalSupplyColors","lockedCapacity","burnt","fetchStatisticTotalSupply","statisticCirculationRatios","circulationRatio","fetchStatisticCirculationRatio","statisticNewDaoDeposits","dailyDaoDeposit","dailyDaoDepositorsCount","note","fetchStatisticNewDaoDeposit","statisticTotalDaoDeposits","totalDaoDeposit","totalDepositorsCount","fetchStatisticTotalDaoDeposit","superMethod","supportedPassiveTypes","supported","opts","defineProperty","get","window","addEventListener","removeEventListener","e","addEvent","EventTarget","prototype","listener","options","passive","usesListenerOptions","useCapture","capture","passiveDescriptor","getOwnPropertyDescriptor","writable","set","assign","indexOf","call","this","_original"],"sourceRoot":""}